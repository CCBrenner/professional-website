@inject UIService UI
@inject HttpClient http
@*implements IDisposable*@

@*
@page "/projects"
*@

<PageTitle>Projects - Collyn Brenner</PageTitle>

<ProjectsPageTemplate>
    <div>Direct attention to projects to the left, then Statistics Section below on this page as all page content.</div>
    <h2>Statistics by Project</h2>

    <h4>AnimateMain: @UI.AnimateMain</h4>

    <h2 @onclick="UpdateStringUsingBackendData">What I Want (from the BE): @_whatIWant</h2>

    <h4>PanelMgmt</h4>
    <p>Panel Group 1</p>
    @for (int i = 2; i < UI.PanelGroups[0].Panels.Count(); i++)
    {
        <p>PanelGroup Panel @i</p>
        <p>PanelGroupId: [@UI.Panels[i].PanelGroupId]</p>
        <p>PanelStatus: [@UI.Panels[i].PanelStatus]</p>
        <p>PanelButtonStatus: [@UI.Panels[i].PanelButtonStatus]</p>
        <p>BlurStatus: [@UI.Panels[i].BlurStatus]</p>
        <p>BehindPanelStatus: [@UI.Panels[i].BehindPanelStatus]</p>
        <br/>
    }
    <p>LocationPanel</p>
    <p>PanelGroupId: [@UI.PanelGroups[0].LocationPanelId]</p>
    <p style="width: 150px; height: 150px; background-color: hotpink;" @onclick='(()=>Console.WriteLine("This is to be printed to the browser console."))'></p>
    @*
    <p>PanelStatus: [@UI.PanelMgmt.PanelGroups[0].LocationPanel.PanelStatus]</p>
    <p>PanelButtonStatus: [@UI.PanelMgmt.PanelGroups[0].LocationPanel.PanelButtonStatus]</p>
    <p>BlurStatus: [@UI.PanelMgmt.PanelGroups[0].LocationPanel.BlurStatus]</p>
    <p>BehindPanelStatus: [@UI.PanelMgmt.PanelGroups[0].LocationPanel.BehindPanelStatus]</p>
    *@
    
    <br />

    <TableTemplate/>


</ProjectsPageTemplate>

@code {
    private string _whatIWant = "string not loaded";
    private async void UpdateStringUsingBackendData()
    {
        var response = await http.GetAsync("/api/Test");
        if (response.IsSuccessStatusCode)
        {
            _whatIWant = await response.Content.ReadAsStringAsync();
        }
    }
    /*
    protected override void OnInitialized()
    {
        //UI.Panel.OnPanelMgmtUpdated += UpdateThisComponent;
        //UI.OnUiServiceChanged += UpdateThisComponent;
    }
    void IDisposable.Dispose()
    {
        //UI.OnUiServiceChanged -= UpdateThisComponent;
    }
    private void UpdateThisComponent(string meaningless)
    {
        StateHasChanged();
    }*/
}
