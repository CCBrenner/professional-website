@inject UIService UI
@inject NavigationManager Navigation

@page "/"
@page "/projectinfo"
@page "/projectinfo/{SectionId:int}"

@implements IDisposable

<PageTitle>Project Info - Collyn Brenner</PageTitle>

<DrawerPageTemplate HeaderIconClasses="fa-solid fa-flask" HeaderText="Project Info">
    <DrawerContent>
        @*
        <DrawerNavLinkButton Href="projectinfo/0" ButtonText="Overview" OnClickCallback="(()=>UI.NavigateToSection(0))" />
        *@
        <DrawerNavLinkButton Href="projectinfo/0" ButtonText="About This Web App" OnClickCallback="(()=>UI.NavigateToSection(0))" />
        <DrawerNavLinkButton Href="projectinfo/16" ButtonText="Bee Hive Manager System/Game" OnClickCallback="(()=>UI.NavigateToSection(16))" />
        <DrawerNavLinkButton Href="projectinfo/15" ButtonText="Hide & Seek Game" OnClickCallback="(()=>UI.NavigateToSection(15))" />
        <DrawerNavLinkButton Href="projectinfo/33" ButtonText="Match Game" OnClickCallback="(()=>UI.NavigateToSection(33))" />
        @*
        <DrawerNavLinkButton Href="projectinfo/3" ButtonText="Front-end" OnClickCallback="(()=>UI.NavigateToSection(3))" />
        <DrawerNavLinkButton Href="projectinfo/1" ButtonText="Back-end" OnClickCallback="(()=>UI.NavigateToSection(1))" />
        <DrawerNavLinkButton Href="projectinfo/4" ButtonText="UX/UI + Modeling Software" OnClickCallback="(()=>UI.NavigateToSection(4))" />
        <DrawerNavLinkButton Href="projectinfo/5" ButtonText="Cloud Deployment + Containers" OnClickCallback="(()=>UI.NavigateToSection(5))" />
        <DrawerNavLinkButton Href="projectinfo/6" ButtonText="Databases" OnClickCallback="(()=>UI.NavigateToSection(6))" />
        <DrawerNavLinkButton Href="projectinfo/7" ButtonText="Testing" OnClickCallback="(()=>UI.NavigateToSection(7))" />
        <DrawerNavLinkButton Href="projectinfo/13" ButtonText="Why Programming?" OnClickCallback="(()=>UI.NavigateToSection(13))" />
        *@
        <DrawerNavLinkButton Href="projectinfo/34" ButtonText="Contact" IconClasses="fa-solid fa-envelope" OnClickCallback="(()=>UI.NavigateToSection(34))"/>
    </DrawerContent>
    <PageContent>
        <div class="sub-page-container">
            <div class="sections-container">
                @*Overview*@
                @*
                @if (UI.Sections[0].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[0].IsCollapsedHeader" @onclick="(()=>ToggleSection(0))">
                            @if(UI.Sections[0].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Overview
                        </div>
                        <div class="section-content @UI.Sections[0].IsCollapsedContent">
                            <h3 class="text-center">Overview</h3>
                            <p>
                                Software developers need to know many things to be effective in their crafting of software code. Not only this, but they need to have the solutions to many different problems locked down in memory, and not just static memory, but in working memory to be called in at the apprpriate times based on the best design philosophies and principles. For that which the software developer does not have locked in their memory they can make up for in different essential skills such as method of searching for something. These multi-step solutions - can be exponentially useful. This page will give you a sense of what technologies I have worked with thus far, however, please note that i am entirely open to learning about other technologies or more specific domains of a technology as well. Learning is only a matter of time. Changing dependencies shouldn't be something to fear. It should be seen as an opportunity for more to be made possible.
                            </p>
                            <h4 style="text-align: center;">Languages</h4>
                            <br/>
                            <p>
                                I first learned some JavaScript, then Python, then the entire language of JavaSCript, then PHP, and then chose C# as my primary programming language. I first started programming in 2018, I started programming substantially in the summer of 2019 and have been coding in C# since March 2022. It has been a treat to learn how effective using an OOP language can be. I prefer OOP languages now that I have more experience with C#, but I also have no problems with functional languages other than they are sometimes a bit hard to read due to being less intuitive.
                            </p>
                            <h4 style="text-align: center;">Stacks</h4>
                            <br/>
                            <p>
                                I have worked in the LAMP stack, Django-Apache-Python-MongoDB stack, MERN stack, and the ASP.NET + BlazorWASM + WindowsServer + SQLServer stack. I used the LAMP stack in one of my courses at TNU where I was first introduced to back-end coding in PHP. You can check it out more in <a href="#" target="_blank">this project (link)</a>. It was while I was learning about the Django framework for Python that I also learned about NoSql databases, ORMs, MongoDB, unit testing, MVC architecture, authentication and authorization implementation, data insertion into markup, and what a biased framework is. You can see more about this project <a href="#" target="_blank">here (link)</a>. Through my discovery of front-end framework SPAs, I suddenly wanted to hop on the YouTube bandwagon of learning ReactJS along with the MERN stack. I was all the while trying to find out what would be best tech and language to focus my learning efforts on. I never made any substantial project with MERN but I did get the full functionality of the stack to operate together in development and I got enough experience in it to know my way around the stack. I found learning about Node particularly helpful in improving my understanding of APIs and what tasks are designated to the backend as well as how packages can be essential parts of a software system as well as how to manage them properly.
                            <p>
                                It was through recommendations from my father-in-law to learn a "real" programming language and from my co-worker's insight into Nashville being primarily a Microsoft town in regards to its software prospects that I decided to start learning C# and landed in the Microsoft ecosystem (the company I work for also being in the Microsoft ecosystem as well). I learned so many things working in the stack mentioned above, from new ways to do SPAs, to C#'s use of Emscripten to compile to WebAssembly, to the architeture of ASP.NET in its varying levels of abstraction to make the code most managable through increased decoupling/mutability, to EFCore ORM to abstract away SQL language use, Blazor Server and WASM, services, repositories, DB contexts, Async-Await requirements and the reason for them, to component virtualization  - not to mention how many new concepts are introduced with strongly-typed OOP languages. Microsoft is showing its committment to investing in the future of software infrastructure and design with a focus on performance, and this makes me glad to be a C# developer. Of course, I am not opposed to working in other languages or with learning a new language where necessary. I am always willing to learn.
                            </p>
                            </p>
                            <h4 style="text-align: center;">Game Development (Unity)</h4>
                            <br/>
                            <p>
                                The course textbook that I worked through included Unity for its fun aspects that were somehwat of a break from straight learning of the C# language. These projects provided perspective into how C# can be used as an extention of other technologies to add functionality where functional complexity is certain to occur. It is because of C#'s compiler that Unity can utilize C# to create fast graphical applications. I will admit to having the urge to want to use 2D Unity in place of front-end web frameworks due to the design starting point. It seems that the future of development something like what Unity editor has come to be today. I am interested to see what the current WebGPU design and development efforts turn into.
                            </p>
                            <h4 style="text-align: center;">Operating Systems</h4>
                            <br/>
                            <p>
                                I have substantive experience with all three major operating systems. I am most versed in Windows (7, 10, 11). I am then about as equally versed in Linux as I am in MacOS, and I do mean the headless and graphical version of Linux as well. It should be noted that my Linux experience is not with Raspberry Pi or similar microcontrollers (as some other developers are), though I do have a thorough knowledge of Bash and prefer Bash as my primary CLI even on Windows. Each has their own strengths and advantages, and I will use whatever is useful for the task at hand.
                            </p>
                            <h4 style="text-align: center;">CLIs</h4>
                            <br/>
                            <p>
                                As the previous section has stated, Bash is my primary CLI of choice due to its being incorporated across the greatest number of platforms. I also have experience with the following CLIs: GitHub, Docker, CMD, MongoDB, dotnet, react, DjangoORM, node, and npm.
                            </p>
                            <h4 style="text-align: center;">Cloud Tools</h4>
                            <br/>
                            <p>
                                I generally prefer GSuite tools to other alternatives due to their cloud accesibility and lack of requirement for a software license to use them. Other cloud tools that I have used in the past include: CyberSource (ecommerce transaction management), JDE (warehouse order management; greenscreen with weird navigation), Salesforce (CRM), Elastic Path (high level ecommerce order management), UseResponse (CRM), Jira (software project management), Zoho (complete business software suite), Mailchimp (online marketing and communication), UBS (background screening), DocUSign, QuickBooks (Desktop and Online), and BlueSky (healthcare staffing software).
                            </p>
                        </div>
                    </div>
                }
                *@
                @*About This Web App*@
                @if (UI.Sections[14].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[14].IsCollapsedHeader" @onclick="(()=>ToggleSection(14))">
                            @if(UI.Sections[14].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            About This Web App
                        </div>
                        <div class="section-content @UI.Sections[14].IsCollapsedContent">
                            <h3 style="text-align: center;">Features and Facts About This Web App</h3>
                            <br/>
                            <p>Some facts and features about this website/PWA (Progressive Web App):</p>
                            <ul>
                                <li>Since this is a PWA means you can install it on your device for offline use. (To find out how to install simply perform a quick Google search for PWA installation for your device type.)</li>
                                <li>This is built on Blazor WebAssembly as an SPA (Single Page Application).</li>
                                <li>The pevious statement implies that the logic is implemented using C#. While the framework relies on JavaScript, no additional JS was added for the functionality, keeping everything in the OOP (Object-Oriented Programming) paradigm.</li>
                                <li>This is built with RWD (Responsive Web Design) so that this one app can be used on mobile devices, tablets, and desktops/laptops.</li>
                                <li>Make the global container of this PWA become animated by clicking the magnet options in the upper right corner or by going to <b>Projects > Layout Controls</b>. (These were added using CSS keyframes attatched to CSS classes that are toggled on and off.)</li>
                                <li>No outside UI libraries are being used except for Bootstrap in some places and FontAwesome for the icons. (Bootstrap could have easily been completely replaced with CSS Flexbox but was not for convenience reasons; CSS and CSS Flexbox is used a lot in this PWA.)</li>
                                <li>This means the navigation items and menus are custom built and custom styled. The app was built with 5 menu buttons and has been reduced to two for this PWA's purpose.</li>
                                <li>Management of the UI changes and routing is done by a single UIService which is injected to each applicable page and component to make the proper changes happen. (For routing within a page events are used to make the page reload since the state change happens outside of the page-scoped component.)</li>
                                <li>The projects to the left and which are contained here utilize many tests for their application logic. (TDD/BDD isquite valuable in the long-term.)</li>
                                <li>(Note: I (Collyn Brenner) understand this is potentially dangerous info to share, but it is for the purpose of being transparent and there is not much to lose here while there is much to gain:) This PWA is containerized using Docker, hosted on Docker hub and drawn on from an Azure App Service offering automated deployment updates whenever the DockerHub repo is updated with a successful "docker push" command to the appropriate repo.</li>
                                <li>The use of collapsible sections came at the hands of lack of my own foresight in realizing that HTML bookmarks work only for the scrollable viewport and not for inner HTML elements that have been given a scrolling property. I still wanted to offer the user the ability to see the content they wanted at the click of a button. Now, instead of taking the user to the section a click brings the section to the user.</li>
                            </ul>
                        </div>
                    </div>
                }
                @*Bee Hive Mgmt System*@
                @if (UI.Sections[16].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[16].IsCollapsedHeader" @onclick="(()=>ToggleSection(16))">
                            @if (UI.Sections[16].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Bee Hive Manager System/Game
                        </div>
                        <div class="section-content @UI.Sections[16].IsCollapsedContent">
                            <h3 style="text-align: center;">Bee Hive Manager System/Game</h3>
                            <div class="proj-desc-buttons">
                                <a href="beehivemgmtsystem" class="btn btn-primary" @onclick="(()=>UI.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/tree/main/ProfessionalWebsite/Client/Classes/BeeHiveMgmtSystem" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <p>April 26th, 2023</p>
                            <h4>Introducing the Hive</h4>
                            <br />
                            <p>
                                This project was a part of Chapter 6 of <i>Headfirst C# (4th Edition)</i> by Andrew Stallman and Jennifer Greene. The chapter covered the topic of inheritance in-depth. This project is designed to show how inheritance can be used to require members to be present in child classes through use of a regular or abstract class. In this system, the user is the Queen Bee who inherits from the Bee class. All bees inherit from the Bee class, and each Bee has a job to do and an amount of honey that they consume per shift of work done before doing their job. If they don’t eat, they don’t work - but they will eat what they can. The bees are pretty lazy, so they won’t work unless the QueenBee tells them to as part of her job. If she doesn’t eat (which she of course eats first), then no one else eats and the hive goes bankrupt.
                            </p>
                            <p>
                                There are three jobs in the hive: Honey Manufacturer, Nectar Collector, and Egg Nurse. When the QueenBee lays eggs, EggNurses nurse eggs until they become Unassigned Worker Bees. The QueenBee is responsible for assigning the worker bees in a manner that keeps her hive running smoothly. The Honey Manufacturer Been makes honey each shift from currently available nectar. If there is no nectar, no honey gets made.The Nectar Collector collects nectar from flowers in the field. All of the jobs of the bees work in a number of economic loops, as can be seen below
                            </p>
                            <div class="wpf-image">
                                <img src="media/images/beeHiveGame/BeeHiveFeedbackLoopsDiagram.png">
                            </div>
                            <br />
                            <br />
                            <h4>Bee Hive Build Progression</h4>
                            <br>
                            <p>
                                This project was originally written with a WPF front-end (which is coded in XAML). It looked like this once it was all prepared:
                            </p>
                            <div class="wpf-image">
                                <img src="media/images/beeHiveGame/BeeHiveGameWPF.png">
                            </div>
                            <p>
                                The classes were built in a normal progression, from the HoneyVault static class, to the Bee as an abstract class, to the three worker types that inherit Bee, and finally to the Queen who is able to do the most out of all the classes. It is the QueenBee’s inherited method “WorkNextShift” method that gets called when the user clicks the “WorkNextShift” button, causing a series of actions to take place in the hive from this single action.
                            </p>
                            <p>
                                The system had two modes: a stepwise mode and a real-time mode. The real-time mode involved a timer applied to the “Work Next Shift” button which would simulate being clicked every 1.5 seconds. When the game was moved from WPF (XAML) to Blazor WASM for this WPF, the DispatchTimer was replaced with System. Timers.Timer.
                            </p>
                            <p>
                                The initial project was not intended to be a full game (that was outside of its scope). When it was migrated and adapted to Blazor WASM for this PWA, those aspects of gameplay needed to be introduced into the game. The readability of a plain text paragraph that updated each shift was not ideal for an enjoyable user experience (and it could definitely look nicer too). A BeeHiveController class was introduced to free the data from its plaintext paragraph to have specific styles and positions applied to each data point. (It is understood that controllers are not generally supposed to be responsible for data manipulation, but they are normally used for transferring prepared data to a view. In this case the controller does both. This is due to lack of a better term.)
                            </p>
                            <p>
                                As developments in the game’s view occurred, I left semi-prepared versions of points where the game was somewhat complete as that view’s current idea. This is for the benefit of the user to compare improvements over the progression of the view’s development. In developing the view, reliability was of the utmost concern. Things like spacing, font-size, RWD, related information location, visibility of rates and addition of data markers which build on top of those rates are all examples of the kinds of improvements that went into the game.
                            </p>
                            <p>
                                Late in development when the timer for Blazor WASM was being implemented, the issue of updating the view component became a problem. Since updating the whole component looked to be a problem, the view for version 3 was moved to a separate component. This led to splitting up the view logic across two components. The logic was extracted and housed as a C#-coded singleton with references added for each component. By this point, what I had not realized is that 2 consecutive requirements had eliminated the need for the first requirement. So I ended up moving the version 3 view component markup back into its original component and deleting the other component once I was sure I no longer needed it (this eliminated unneeded complexity). The root of the issue is that the data values were being obtained through C3 property Get methods, and these Get methods had nothing to trigger their method when data in the “model” of the game was updated. What accomplished the triggering of the methods is an event tied to the timer’s elapsed method, so that after all values were updated in the “model”, the event would be triggered, and the subscribed method in the code section of the Razor component can invoke the “StateHasChanged()” razor method that re-renders the component manually - presenting the updated rates in the component.
                            </p>
                            <br />
                            <h4>Project Take Aways</h4>
                            <br>
                            <p>
                                Singletons and DI: Migrating this game and developing its view brought me to appreciate how useful the Singleton and DI design patterns are when used together (I learned about how to code Singletons during this project while learning from ChatGPT). I was able to utilize C#-coded Singletons to house a single instance of code that I wanted referenced in multiple places. I came to see that the UI.SectionMgmt class which I had created for the PWA is useful the way it is because it is a Singleton. I discovered that I don’t need to keep the UI.SectionMgmt class as a registered Blazor WASM service after all - it can be its own code and then be removed from a domain of the project that is supposed to be solely responsible for data request and validation.
                            </p>
                            <p>
                                Tabs Add Space: This is now the second place where I have added a tab-like functionality to the view. Since I am very interested in the development of the future of PWA for mobile devices, and since space seems to be an issue when creating RWD for mobile screens - it appears that in-view tabs have the ability to create space in a compact and easily navigable fashion. You can even use a single component to accomplish this with C#/Razor component conditionals if you are using Blazor WASM. I am now wondering (since I have just witnessed Windows 11’s update to their File Explorer, giving it tabs) that there are likely UI improvements that can make tabs appear nicer or more obvious, the way browsers present them. (When I was in college, I read in a UX/UI book that the best way to do RWD is to start with mobile first. It is much easier to add than to remove things once you have added them. When you aim to optimize for mobile, you are putting the largest user category first (mobile users). When you design mobile-first, you are left with much more space for larger screens, and this is because the designer tries to make the most out of the little space that he has first - a tighter constraint - than if he were to start with more and move to less. No, start with less, and later on the acquisition of more space will be adequately appreciated and utilized even better than previously.)
                            </p>
                            <br />
                            <h4>Upcoming Plans</h4>
                            <br>
                            <p>
                                At this point in time I have created a new PanelMgmt singleton for potentially managing all panels used in the project, so that when one is selected, if any others are open then they will be closed before opening the panel selected. Logic for classes applied to each panel are housed in PanelMgmt (including for activated appearance of the selected button), relieving single components from having to implement their own view panel logic. A new panel’s logic can be created and labeled in the PanelMgmt singleton class and plugged in wherever it is needed through adding a PanelMgmt reference to the component. The UI.SectionMgmt class already manages its own panels in this way, so after I migrate the UI.SectionMgmt class to be an unregistered C#-coded singleton I plan to migrate the UI.SectionMgmt panels to the PanelMgmt singleton, and then with a reference to PanelMgmt in the UI.SectionMgmt class, the UI.SectionMgmt class can tell the PanelMgmt class what to do when certain navigation actions occur.
                            </p>
                            <p>
                                A lot of ideas for this BeeHive game emerged, and the top ideas I want to implement at some point include (1) settings with checkboxes that can make certain rates not visible, (2) add ability to change the game-defining rate and conversion values that were given by the project’s author (as well ability to revert to defaults),  I would like to (3) add a “Worker Lineup” of all workers and the order in which they will work when the next shift starts (since  worker order does matter; a series of small actions does not have the same effect as the sum of the actions happening at one single point in time), and (4) add a “Transaction Ledger” for all transactions that occur for each worker, in order, showing a running balance of the total amount of honey (and nectar, space permitting) that is currently in the Vault.
                            </p>
                        </div>
                    </div>
                }
                @*Hide & Seek*@
                @if (UI.Sections[15].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[15].IsCollapsedHeader" @onclick="(()=>ToggleSection(15))">
                            @if(UI.Sections[15].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Hide & Seek Game
                        </div>
                        <div class="section-content @UI.Sections[15].IsCollapsedContent">
                            <h3 style="text-align: center;">Hide and Seek Game</h3>
                            <div class="proj-desc-buttons">
                                <a href="hideandseek" class="btn btn-primary" @onclick="(()=>UI.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/tree/main/ProfessionalWebsite/Client/Classes/HideAndSeekProject" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <br/>
                            <h4>Introduction</h4>
                            <br/>
                            <p>This project was introduced at the end of Chapter 10 of the Headfirst C#, 4th Edition textbook course by Andrew Stellman and Jennifer Greene (12 chapters total). Chapter 10 covered how to read and write files, particularly covering how to use streams in C#.  If you would like to view the project’s PDF instructions which were used to make this application, please <a href=”https://github.com/head-first-csharp/fourth-edition/blob/master/Downloadable_projects/Chapter_10_project.pdf” target=”blank”>click here (link)</a>.</p>
                            <br/>
                            <h4>Hide and Seek Game Design</h4>
                            <br>
                            <p>The classic childhood game hide and seek is featured in this application. The user moves through, searching for five virtual players that are hiding in a number of different hiding spots throughout the three-story house. The game was originally designed to be played as a command line interface (CLI) game (consisting of text-prompts by the application and text response/commands from the user playing the game). After the game was fully built for CLI, it was then converted to having a graphical user interface (GUI) in Blazor WebAssembly, a front-end web framework which uses C# instead of JavaScript. When this game was added to this website (<a href=”#” target=”blank”>click here</a> to go to the project) the original UI was kept and was then given an improved GUI that was much more responsive across screen sizes (a concern of keeping this progressive web app (PWA) responsive web design (RWD) compliant).</p>
                            <p>This project in particular highlights the use of a StreamWriter to save and load mid-game data to the user’s local machine. Test-driven design (TDD) was used in the development of the application (a process which involves writing unit tests first, making them fail, then writing code until the tests no longer fail). The classes that were foundational dependencies (meaning all other classes rely on their being functional) were coded first, and then the classes that use those classes, which are dependencies for other classes, were built and so on. This is the supposed “proper” way of coding OOP (object-oriented programming) entities when a dependency tree exists.</p>
                            <p>The classes that are used are the GameController, House, Location, LocationWithHidingPlaceSome, and Opponent classes. It also includes a Direction enum. An enum is a list of limited variations of the same object type. The enums infer/suggest a relationship and possible interchangeability between the enum’s values to be used somewhere in the code. The name of the enum, in this case “Direction”, becomes the data type that each of these values share. In this case, rooms (“Location”s) are linked together. Each location has a list of exits. Each exit is a passageway (the link) between rooms. Each exit is a Direction value. For two Locations that are linked, each Location has an exit with the opposite corresponding Direction value. For instance, the Entry has a “Direction.Out” exit that leads to the Garage, while the Garage has a “Direction.In” exit that leads to the Entry. The House class is a static class (a class that requires all class members to be static; it cannot be instantiated but can be used by referring directly to the class, such as “House.GetLocationNames()”). The House class houses all locations that the player can navigate through. Since the Locations (rooms) are instantiated in the House class, this means all Location connections are created in the House class as well. Certain locations have additional members which include a hiding space where multiple opponents (instances of the Opponent class) can hide. These “LocationWithHidingPlace” instances inherit from Location and make this possible.</p>
                            <p>All of the above is accessible via the GameController. The Game Controller provides the interface for the view/program to obtain the necessary text or data feedback that the game involves. In the CLI version of this Hide and Seek game, the game program exists in a loop which runs through generating a prompt with current game status, available exits, if there is a hiding place in their current location, and then asks the player where they want to go. The user responds by checking an available hiding place or with one of the available directions - <b>not</b> with the name of the room (an important distinction for later versions of the game). At any point in time the user can save the game with the “save {filename}” command or the “load {filename}” command for games that were saved previously. These functions are included in the GameController class.</p>
                            <br/>
                            <h4>Moving from CLI to GUI</h4>
                            <br>
                            <p>The project authors suggested switching the CLI to having a GUI so that the developer (me) could gain experience converting a program to using a new interface. I opted to do so, choosing to use Blazor WASM for the implementation. It was not difficult to move the project assets (mostly the classes) over to the Blazor project. I experienced a learning curve with Blazor when utilizing data binding particularly for the list of available exits which the user selects first before moving to a new location via the selected exit (two separate interactions). It was a simple GUI and it gave the game a 2D interface for interaction - a step up in user experience.</p>
                            <br/>
                            <h4>Moving v1 GUI to This PWA with v2 GUI</h4>
                            <br>
                            <p>When adding the game to this progressive web app (PWA) I decided to include the Original UI so as to compare it to the newly created UI (called “Current UI”) that I wanted for this PWA. I had increased in knowledge skills with Blazor since the first version of the UI was made, and I came to find that the first version UI was not responsive enough. It needed to be fully responsive for this PWA (<a href=”#” target=”blank”>read more (link)</a>).</p>
                            <p>To improve the user experience (UX) of the player, I chose to utilize a virtual GUI controller made up of the directions the player could select and to have the text prompts and  game status all appear in the screen above it - kind of like a handheld gaming device of the 1990s and 2000s. This maximized the amount of screen space I could utilize by minimizing the space taken up by the controls of the original UI -  something that would be particularly important for mobile users when considering readability and minimized number of required interactions. You will notice on this point that the user no longer has to select AND move - the player can move with one tap or click instead of two. Feedback is something that can be useful for users, and in this case feedback about which directions they are able to go through are presented to them by lighting up the available exit directions in the controller (a feedback function that virtual controllers have much more readily available than physical controllers do). This is important to note: a key aspect of the original game is that the user chooses the <u>direction</u> they want to go and <u>not</u> the location. Locations can change with every room the player visits which would not be able to be captured as information feedback to the user through the controller (at least not without major modifications to the controller, ultimately ruining the controller design due to lack of space for more than 2 letters) - but if the player navigates using a limited number of directions then the same directions can be presented in the controller without issue when moving between locations. This early design decision in the first version of the game by the project authors made a huge impact on the final UI, which in turn affects the experience the player receives.</p>
                        </div>
                    </div>
                }
                @*Match Game*@
                @if (UI.Sections[33].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[33].IsCollapsedHeader" @onclick="(()=>ToggleSection(33))">
                            @if(UI.Sections[33].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Match Game
                        </div>
                        <div class="section-content @UI.Sections[33].IsCollapsedContent">
                            <h3 style="text-align: center;">
                                Match Game
                            </h3>
                            <div class="proj-desc-buttons">
                                <a href="matchgame" class="btn btn-primary" @onclick="(()=>UI.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/blob/main/ProfessionalWebsite/Client/Pages/MatchGame.razor.cs" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <p>May 11th, 2023</p>
                            <h4>Introduction</h4>
                            <br />
                            <p>
                                This was one of the first projects introduced in <i>Headfirst C# (4th Edition)</i> by Andrew Stallman and Jennifer Greene. It is a simple match game with modes for playing with an added timer. It is a straight-forward project, so let’s take a look at it.
                            </p>
                            <br />
                            <h4>Match Game for WPF (using XAML)</h4>
                            <br>
                            <p>
                                This matching game was originally built in Windows Presentation Fountain (WPF), a framework for building Windows Desktop applications using the XAML language for the UI markup. The reasoning for using WPF is to get experience with XAML which is still used in many C# projects, including Android and iOS mobile apps using Xamarin Forms (which will discontinue support May 1, 2024). .NET MAUI (Multi-platform App User Interface) which also utilizes XAML is poised to take Xamarin Forms’ place, but that is getting off topic. This project involved multiple steps of construction, including setting up the project, initial configuration of the UI, writing the program code, linking the code to the UI components, and finally adding a timer so that users can race against the clock for adding competitiveness.  The UI itself utilizes a grid layout mechanic for positioning of elements, and then you can position based on the grid cell location and the position within the cell. Data values are rendered/updated in the UI via events such as MouseDown. These events are able to be generated from VS Code. This is one example of a number of useful options for XAML UI being both text and UI changeable. The program tracks if the game is currently happening or not, it assigns random emojis that exist in a list to different TextBlocks, conditional logic manages what happens when a TextBlock is clicked, and a timer is updated every interval that passes by. The timer used is specific to XAML (DispatchTimer).
                            </p>
                            <br />
                            <h4>Match Game for Blazor WASM</h4>
                            <br>
                            <p>
                                Migrating this matching game to an entirely new UI was a task due to the large amount of coupling the XAML UI was utilizing in the WPF app. Luckily this is only a small program, so the damage is minimal, but it afforded a rewrite of about 70% of the code (since the Blazor component wouldn’t be using events to update UI state the way WPF does, plus the DispatchTimer being specific to WPF and therefore needing a replacement). All events for UI interactions were removed and replaced with methods that were tied to @@onclick event handlers in HTML elements (part of how Razor components work). The UI was rebuilt from scratch in HTML/Razor components. An HTML Table was used to preserve the grid appearance of the game, with a number of UI aesthetic improvements. The game moved into more of an OOP direction with the introduction of the Block class for the 16 interactive cells and further the MatchGameStatus enum. The DispatchTimer was replaced with a System.Timers.Timer and accompanying Elapsed method to be called at every timer interval. To avoid issues with highlighting the emoji when a user clicks or taps on a cell, a div was placed over the visible element to receive the action while the underlying element updates the showing  emoji accordingly. Razor conditionals to change the rendering of the top information section from being one section to two separate sections for greater readability through separation of items. The entire new UI implements responsive web design (RWD), making it playable on all screens with a consistent user experience (UX).
                            </p>
                        </div>
                    </div>
                }
                @*Frontend*
                @if (UI.Sections[3].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[3].IsCollapsedHeader" @onclick="(()=>ToggleSection(3))">
                            @if(UI.Sections[3].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Front-End
                        </div>
                        <div class="section-content @UI.Sections[3].IsCollapsedContent">
                            <p>
                                My introduction to coding was through FreeCodeCamp using JavaScript. This led me naturally into developing web sites with HTML and CSS along with JS. I would say I have a particular affinity for clean, functional, modular user interfaces that look very nice by themselves and then make the user feel really good through simplicity and handling things for them in ways that communicate thoughtfulness. It is important to make designs intuitive when making interfaces, and this usually means gleaning from many different users and the decisions they make when navigating a GUI. It seems as though the key to an intuitive interface is learning through interaction, enabled by simplistic design, and finding things where you expect them to be. I am glad we now have moved into the age of SPAs and component-based architecture because it allows for UI components to be reused in the same way classes are, reducing code which generally translates into less for the programmer to manage (in many cases).
                            </p>
                            <p>
                                I have worked with plain front-end languages, LAMP stack (which utilizes PHP for serving the front-end UI to the client), React, Django, React Native, and Blazor WASM. I enjoy providing a pleasant and enjoyable experience to the user because I like making things that I can use. When an interface I have made or helped to improve delights me, I am proud of my work and gain a sense of fulfillment and appreciation for the work I’ve done.
                            </p>
                            <p>
                                The user interface seems to be one of the most under-rated tools for communicating who and what a company is and is about. Through an excellent UI the user can tell exactly how legit/credible a company is, how serious they are about what they do, and if it looks great, the user may enjoy just having a lovely experience. Of course, the software has to work well too, but these kinds of things are often left as a secondary thought and not followed up in their proper time.</p><p>I could talk a whole lot about the workings of front-end/back-end communication. For this, please see the API section of this page (KnowHow > API).
                            </p>
                        </div>
                    </div>
                }
                @*Back-end*
                @if (UI.Sections[1].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[1].IsCollapsedHeader" @onclick="(()=>ToggleSection(1))">
                            @if(UI.Sections[1].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Back-end
                        </div>
                        <div class="section-content @UI.Sections[1].IsCollapsedContent">
                            <br/>
                            <h3 class="text-center">Back-end</h3>
                            <p style="color: red; text-align: center;">SECTION NOT FINISHED - NEEDS TNU CLASS CONTENT, EXPERIENCE, AND MODELING SOFTWARE</p>
                            <br/>
                            <p>My back-end experience consists of a number of different back-end technologies, only one of which I dove into great depth with using. The first three I gained experience with are PHP (LAMP stack), Django (full-stack framework for Python), Node + Express (MERN stack). Since I have now committed myself to being a .NET developer, I have become most experienced in ASP.NET Core (using .NET 6 & 7). </p>
                            <p>I was first introduced to bac-end development during a class I was taking in university and we utilized the LAMP stack which uses Linux, Apache, MySQL, and PHP. Due to the scope of the class being on back-end development, we utilized a program called MAMP to set up the linux environment that the back-end would run on. The code was in PHP and we learned the fundamentals of back-end development and how to work with a DBMS for MySQL. We learned how to work with SQL string commands within PHP and how to perform data validation. It was a good introduction.</p>
                            <p>From there I was not yet wise enough to understand that I should learn a lot about one thing, so I learned how to use the full-stack Django framework. Django operates on top of an integrated MVC architecture, though it is not exactly MVC as most people understand it (which took me some time to learn). I also came to learn through Django that design intentions are important to consider. Django seemed to be primarily suited for blog-style websites and web applications. It could serve well in a number of other respects, but it was opinionated in that way. I did not enjoy the number of strange error messages I was confronted with while using it too (granted, it was my first time really working through error messages on my own which can be a terribly hopeless thing for a beginning programmer). I utilized it in my college senior capstone project and then abandoned it as something to use for any future projects. I at least learned a number of other things along the way, such as how Python relies on technologies outside of Python, in this case Django and the host server which was linux (as most servers are). I learned about authorization and authentication, pagination, MVC, more about data validation, and a few other things as well.</p>
                            <p>Knowing I no longer wanted to work in Django, I searched the internet for a more reliable framework (as a new programmer does) and decided upon the most popular stack out there, the MERN stack. I worked through one application set up, became familiar with it, did about as much in it as I did with Django, and moved on, feeling hopeless. I had yet to build something I wanted to make.</p>
                            <p>After developing a stronger relationship with my father-in-law, I was turned on to C# as a “real language” by him (compared to JS which he believes is not a real programming language). So I learned the C# language through a Headfirst C# online textbook, became acquainted with OOP and how to do OOP correctly, and over time developed a better framework for how to program well. Some people pit functional programming and OOP against each other, but I see both in each and for that reason I don’t see why there needs to be a feud over it. As long as you are achieving clean and readable code, then I think the programmer and everyone who has to deal with that code is winning. For instance, functional programming says that it is best to have small functions that are reusable so that you can call function after function such that that function remains the same and does a single thing. This means you end up with many functions. The functions being numerous is helpful because you have more descriptions for what is happening through each function name. This also means that when you create many functions, you have to understand exactly what you are making the function for. Once you have many functions, or even while you are creating many functions, you then have the ability in OOP to organize all of the functions based on what they are related to. In OOP we have the ability to use the “static” keyword to create functions that are available to the whole namespace and which are categorized by the class they exist in without the need for creation of any instance of the class. This is a very functional aspect that OOP allows for. In a similar way as classes alow for static functions, you could also say a language like JS allows for modular code via file-scoped function declarations. If you think about it, that’s what we do in OOP by convention anyways - we use one class per file to keep code modular. OOP allows for the additional classification of functions to either be instance-scoped or namespace scoped, which adds benefits over only being module/file-scoped. Don’t undervalue your ability to communicate via function names and through comments! I prefer having strong/explicit typing over dynamic typing specifically for when a project grows and reaches a threshold size, at which point organization and complexity need to be managed well.</p>
                            <p>Getting back to back-end in ASP.NET, I have come to find EF Core as a great tool for working with databases. I mostly have worked with SQL Server and plan on testing out EF Core with PostGreSQL (for performance reasons) and CosmosDB (for document-based DB benefits over SQL (aggregates & multiple DBs without the need for sharding the DB like with SQL)). I have come to learn about the factory pattern, the repository pattern, the proof-of-work pattern, the controller pattern, about minimal APIs, clean architecture (domain driven design, DDD), creating custom exceptions, asynchronous functions (why they are necessary, useful and what they require when configuring), service registration, options design pattern, adapter pattern, data validation, and more.</p>

                        </div>
                    </div>
                }
                @*UX/UI + Modeling Software*
                @if (UI.Sections[4].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[4].IsCollapsedHeader" @onclick="(()=>ToggleSection(4))">
                            @if(UI.Sections[4].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            UX/UI + Modeling Software
                        </div>
                        <div class="section-content @UI.Sections[4].IsCollapsedContent">
                            <br/>
                            <h3 class="text-center">UX/UI + Modeling Software</h3>
                            <p style="color: red; text-align: center;">SECTION NOT FINISHED - NEEDS TNU CLASS CONTENT, EXPERIENCE, AND MODELING SOFTWARE</p>
                            <br/>
                            <h4>User Experience is Most Important Other than Being Functional</h4>
                            <br/>
                            <p>I believe the best user experiences incorporate intuitive interfaces that are easy to navigate, present the most relevant information to the user wherever possible, and which take care to minimize needless additional actions. Attractiveness and dynamic features can add to the experience. All of these are ways that a programmer can communicate thoughtfulness to the user. Thoughtfulness is a lot like kindness embedded in design decisions that many users are able to appreciate. A user is able to appreciate your product if they can see clear indications that enhancements to enjoyable aspects were added and barriers to enjoyment were removed. These statements are especially true if the product incorporates elegance and offers a pleasant experience.</p>
                            <p>Steve Jobs and Apple did this very well with the iPhone, particularly with their advertisements of the product featuring Jony Ive, the iPhone’s Chief Design Officer. Jony Ive always stressed the <em>elegance</em> and the <em>simplicity</em> of the iPhone’s design. There is no argument that users enjoy something that perceptually is really nice and very simple, even if it isn’t simple when considering all of its functions. Einstein once said, “I have deep faith that the principle of the universe will be beautiful and simple”. The above simplification of the user’s experience involves reducing the required psychological work and physical work on the part of the user. Physical work includes but is not limited to the number of interactions a user has to make in order to perform certain functions. Psychological work includes but is not limited to interactions that may not be hard to do necessarily but which either require a lot of cognitive effort or which require the user to think in a way that causes negative feelings to arise, whether stress or agitation, or increased requirement to focus with no apparent reward, etc.</p>
                            <p>In MDA game design methodology (Mechanics, Dynamics, and Aesthetics), this means that the design (mechanics) is affecting the user's feelings (aesthetics) because the mechanics of the game force the user into performing certain actions or sequences of actions (dynamics). MDA is more than boiling down to design, actions and feelings, but this is one way to use MDA to analyze game design. It is the developer’s problem of if/when their users do not like using what the developer built. To build something that makes money for the makers, the business side of product development has to be considered. Engineers and business managers ultimately share the same goals: To promote an excellent user experience with their product.</p>
                            <p>With a lackluster user experience comes decreased sales of the product, or in subscription models, the loss of a customer/client. Video game production companies are astutely aware of this, but app designers and website builders may not consider this interplay of interface elements to be of much concern. A well-rounded experience requires extra work and multiple iterations to achieve, but the payoff is in user experience, which can translate to word-of-mouth advertising if your users like what you made. It could be because it is really nice, or easy to use, or it might be something they may find useful for their purposes.</p>
                            <p>The most effective way to go about creating the best experience for your users is by building a prototype and hearing from and observing your users first-hand. Engaging with your (potential) customers helps you get to know what they are like, how they think, what their tendencies are, what they like and don’t like, why they like your product - all incredibly valuable insights into the product development (iteration) process.</p>
                            <p>Yet, software developers don’t always see customer engagement as necessary. They often don't care all that much about the customer. They would rather not go through the discomfort of having their ideas ripped apart by first-person commentary on the product - yet that is a person’s real opinions about your product. That which is real is what needs to be dealt with to gain real success with the real thing that is being made.</p>
                            <p>I love gathering insight, I love building things, and I love helping people. If what I'm building doesn’t help people, I want to gain more insight as to why. This insight is needed to build better things that help people more (or helps more people). If the thing I am building is used by others to build better things, then it would be wise for me to acquire information about the end result of my customer’s product; in this case, my product’s success is not just about building my product’s intended end. It is an outcome-focused orientation, one intrinsically characterized by long-term, interdependence thinking. Technology is utilitarian in its nature, meaning it is utilized as the means to some ends. If the technology does not achieve its intended end, then it is valueless as a means to that end. There aren’t many people willing to trade something of value for something of less value. Something of no value is not worth considering.</p>
                            <br/>
                            <h4>Mentality is Key - The Developer May Lack Consideration for what they stand to Gain</h4>
                            <br/>
                            <p>If the developer does not want to talk to the customer/client, perhaps they are not considering what they would gain from doing so. User insights are like development solutions: you learn each insight once and then it sticks with you through the reinforcement of common sense. The developer gets the added benefit of seeing from the user’s perspective. Insights improve accuracy of decisions made in the product’s development. In software development, you have to make a lot of decisions, and decisions about design rank very high if not at the top of the list of important decisions.</p>
                        </div>
                    </div>
                }
                @*Cloud Deployment + Containers*
                @if (UI.Sections[5].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[5].IsCollapsedHeader" @onclick="(()=>ToggleSection(5))">
                            @if(UI.Sections[5].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Cloud Deployment + Containers
                        </div>
                        <div class="section-content @UI.Sections[5].IsCollapsedContent">
                            <p>Kubernetes container management and microservices architecture has come to dominate the cloud services industry even to the degree of creating several types of technical certifications for roles within specific cloud infrastructure providers such as AWS and Azure. Docker has become the #1 container tool used by devops teams and other development teams for the streamlining of development and production release pipelines. Leveraging this kind of infrastructure and technology is proving to be high in controllability based on fluctuating application service demands, and so it has become very useful to have knowledge of how development inside of containers benefits a company or organization. The software developer does well when he or she learns how a tool like Docker works to bring many benefits to an application.</p>
                            <p>The cloud has consolidated itself away from the older models of on-site technology infrastructure management. Cloud infrastructure serves many clients instead of just one, and in so doing has increased the level of security and quality of service that can be offered to business. This has also introduced tiered service levels based on the amount of customizability/control/responsibility a business wants to have over the cloud resources it pays to use. The three largest categorizations of cloud services are IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service). IaaS offers the most control, SaaS offers the most out-of-the-box pre-configuration and least control, while PaaS falls somewhere between the other two with benefits and drawbacks of both of the other options.</p>
                            <p>When talking about containers, we are talking about virtual machine environments that can be created on-demand through the use of a template which exists in the form of a container image. Docker offers a way to create such images so that the creation of the container is consistent across every container based on the container image used. The image is composed of layers. The layers allow Docker to reduce the amount of work by skipping over the layers that have not changed and beginning with the first layer in the sequence that has changed (in the case of updating a container). However, the layers are always read in order, so that if layer 3 has changed but layer 5 has not, Docker will begin building at layer three, then go to 4 then go to 5 and so on until all layers have been completed to create the container environment.</p>
                            <p>If you are still unsure what a container is, it is a virtual machine that acts the same way a physical server would only it allows a physical server to host many VMs on a single physical server, providing higher and more efficient use of the physical server’s resources than if only one application were installed on it without the use of a virtual machine container.</p>
                            <p>A number of .NET project templates offer the ability to create a project with a preconfigured Docker file included with the project. This makes for ease of setup by skipping the requirement to manually configure a Dockerfile for your projects. Docker also allows you to manage multiple Dockerfiles through use of a Dockercompose file. </p>
                        </div>
                    </div>
                }
                @*Databases*
                @if (UI.Sections[6].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[6].IsCollapsedHeader" @onclick="(()=>ToggleSection(6))">
                            @if(UI.Sections[6].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Databases
                        </div>
                        <div class="section-content @UI.Sections[6].IsCollapsedContent">
                            <p>With any software program you make, you are going to want to keep the data you want to keep for long-term purposes separate from your system processes. This is the main purpose of databases, to serve as persistent storage for data that your program depends on. The database is often so fundamental to the operation of a system that terms such as data-driven design and domain-driven design (DDD) are common terms software programmers are familiar with today. These terms point to the greatest benefit of the internet, which is that data is accessible to the greatest number of people in the greatest number of ways and in the greatest number of places. And so a database is most concerned with keeping data safe yet accessible. </p>
                            <p>There are two camps that databases fall into. These are SQL databases and everything else which we have given the term “NoSQL” databases.</p>
                            <p>Some examples of SQL databases are MySQl, SQL Server, and PostgreSQL. SQL databases are composed of tables, in which each table has a set of rows and each row a number of columns that store values that are common to all rows in the table. SQL gets its name from the common language used to access SQl databases, the name of the language used being SQL. SQL employs a method for reducing the amount of duplicate data stored in the database tables and upholds a standard of formatting that keeps the data in an optimal structure and form for access and modification. When a programmer applies such rules to a SQL database we call the process normalization. There are different degrees of normalization, but the minimum desired level of normalization by most programmers is 3NF or the “3rd Normal Form”. SQL databases also apply rules for access that are described by the acronym ACID which stands for Atomicity, Consistency, Isolation, and Durability. These are applied to the transaction performed on a SQL database to maintain the integrity of the data in the database. SQL databases utilize transactions which ensure that once a process has begun, the entire process must be completed or else no changes are made to the SQL database. SQL databases are commonly used with monolithic software architectures, but they don’t have to be. SQL databases typically serve as a single source of truth, meaning that the data of a SQL database is found geographically in one place and one place only. One way to increase performance is to divide a SQL database into shards, where the data of the database that most closely serves a people group of a certain geography have their data stored on a server that is physically closer to the user. </p>
                            <p>NoSQL databases get their name because they don’t use any SQL in their databases. NoSQL databases come in different types, two of the most popular being document databases and graph databases. Document databases have come into popularity among development teams due to their ability to create multiple locations for data as the source of truth, allowing the data the user uses closer to the user physically. Document databases also allow for rapid scaling of data due to their extensible design and lack of data quantity constraints otherwise imposed by the structure of the database. Graph databases have become popular as well for their useful structure of nodes and edges, where a node is an entity and the edge is the relationship of the entity to another entity (or you an say that the edge is treated as an entity in and of itself but with the requirement of being connected to two other nodes). Both of these database types allow for a more flexible persistence of data storage and based on their unique structure properties they can be used in a more useful way in a number of common data processes.</p>
                        </div>
                    </div>
                }
                @*Testing*
                @if (UI.Sections[7].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[7].IsCollapsedHeader" @onclick="(()=>ToggleSection(7))">
                            @if(UI.Sections[7].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Testing                        </div>
                        <div class="section-content @UI.Sections[7].IsCollapsedContent"> `
                            <p>In web development there are generally three major types of testing: unit testing, integration testing, and end-to-end testing. There are other kinds of tests that can be performed, like usability tests, regression tests, sanity tests, and smoke tests. The goal of tests is to prove your system works the way you intend and expect it to. On the topic of expected behavior I would like to take a detour and talk about Test-Driven Development (TDD).</p>
                            <p><b>Test-Driven Development (TDD)</b> is the name of the software game today and if you don’t know how to do it then you may be left behind. TDD is concerned with unit tests and can better be conceptualized by turning the T into B, giving us Behavior-Driven Development. BDD is accomplished when the method of writing code is to define a number of <b>tests first</b> based on the desired <b>behaviors</b> you wish to see in your application. The tests you create help you nail down the program behavior as your top priority and focus. These tests put the business rules first and give you a means for checking if your code works the way you expect it to.</p>
                            <p>With TDD/BDD (“behavior tests”) you start with the name of the test as the described behavior in human-readable terms, then you use either ”Arrange, Act, Assert” or “Given, When, Then” schemas as guiding steps for the three parts of each test. When you have finished writing the test, create the shells of any of the new methods introduced in your test, throwing new “NotIMplementedException” exceptions for each new method. Then you run the test and make sure that it *fails* (because there is no code for the test to use to satisfy the assertions of the test). Making sure it fails ensures your test works well enough to at minimum not give you a false positive (or no result at all). Once you get the test to fail, then you are ready to start defining the logic of the different methods used in the test. Then once the code is completed, run the tests again and try to get the code to pass the test. It is through TDD/BDD that you as the programmer are focused on what matters most with the business rules at the forefront of your mind, creating a means for testing whether you’ve created the right code, and then all that’s left to do is write the code.</p>
                            <p>After initial completion you then have the tests forever afterward as a very quick means for checking that the program behavior is up-to-standard, that nothing has broken incidentally while performing any other code changes. This works because the behaviors you want should not change, but the code that accomplished the behaviors can change. In this way the tests are more abstract than the code, and if this is maintained then you should not have to change your tests all that much. You may still have to update your tests from time to time (for things such as updating a method’s parameters), but most of the time changes can be accomplished with tools your IDE provides to you. As you continue to refactor you may eliminate requirements and thereby find reason to delete tests, in which case you no longer need the test and can get rid of it, leaving less code for you to maintain.</p>
                            <p>It should be noted that many programmers do not like writing tests, and for good reason. Tests can take a long time to write. More than this, many programmers don’t grasp from TDD what the purpose of their tests is supposed to accomplish, what the goal of them is. The tests end up becoming less and less useful, and they can even become technical debt when companies require a certain code-coverage percentage at all times for their code, as if a code-coverage percentage means the code is good. The fact about tests is that code suffers from poorly written tests. Tests become a dependency of your code, and your code is dependent on bad tests, it’s no wonder programmers may build up a disdain for tests. But in the context of a system, we are building code to achieve certain behaviors, and when tests are thought of as judges of behavior, then TDD starts to make more sense, and we may just be the better for it if we were to teach TDD as BDD terms instead.</p>
                        </div>
                    </div>
                }
                @*Why Programming?*
                @if (UI.Sections[13].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[13].IsCollapsedHeader" @onclick="(()=>ToggleSection(13))">
                            @if(UI.Sections[13].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-right"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                            &nbsp;
                            Why Programming?
                        </div>
                        <div class="section-content @UI.Sections[13].IsCollapsedContent">
                            <p>Creating high-capability, highly-accessible technology. Devices that are most used are mobile devices because of high accessibility on-the-go, so I really think the future is in innovating mobile apps to have more space in the UI while maintaining excellent UX</p>
                            <p>Blazor + .NET 8’s customizable hybrid approach to web software infrastructure (having to do with performance)</p>
                            <p>Introduction of gaming UX/UI venturing  gaming as a competitive web UI-building tool (WebGL + Unity, could be enhanced by WASM/Emscripten)</p>
                            <p>You get to use logic in ways that enhance the livelihood of people. It has a curious way of creating more opportunities for flourishing in multiple exponential ways. The efficiency of reducing required workload when utilizing software technologies is something I find wonderful. It offers the opportunity to sculpt a repeatable user experience, which allows for the heavy lifting to be done once and based on reliable scientific discoveries for optimizing a user’s return on time invested while using the technology.</p>
                        </div>
                    </div>
                }
                @*mocks of above sections for user clickability (user won't tell difference between the mocks & originals)*@
                @*Contact*@
                @if (UI.Sections[34].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @UI.Sections[34].IsCollapsedHeader" @onclick="(()=>ToggleSection(34))">
                            @if (UI.Sections[34].IsCollapsedHeader == "collapsed-header")
                            {
                                <i class="fa fa-chevron-right" />
                            }
                            else
                            {
                                <i class="fa fa-chevron-down" />
                            }
                            &nbsp;
                            Contact
                        </div>
                        <div class="section-content @UI.Sections[34].IsCollapsedContent">
                            <Contact />
                        </div>
                    </div>
                }
                @if (UI.SectionedPages[1].ASectionIsCurrentlyPromo)
                {
                    @*
                    @if (!UI.Sections[0].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[0].IsCollapsedHeader" @onclick="(()=>ToggleSection(0))">
                                <i class="fa fa-chevron-right"/>
                                &nbsp;
                                Overview
                            </div>
                        </div>
                    }
                    *@
                    @if (!UI.Sections[14].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[14].IsCollapsedHeader" @onclick="(()=>ToggleSection(14))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                About This Web App
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[16].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[16].IsCollapsedHeader" @onclick="(()=>ToggleSection(16))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Bee Hive Manager System/Game
                            </div>
                        </div>
                    } 
                    @if (!UI.Sections[15].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[15].IsCollapsedHeader" @onclick="(()=>ToggleSection(15))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Hide & Seek Game
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[33].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[16].IsCollapsedHeader" @onclick="(()=>ToggleSection(33))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Match Game
                            </div>
                        </div>
                    }
                    @*
                    @if (!UI.Sections[3].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[3].IsCollapsedHeader" @onclick="(()=>ToggleSection(3))">
                                <i class="fa fa-chevron-right"/>
                                &nbsp;
                                Front-End
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[4].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[4].IsCollapsedHeader" @onclick="(()=>ToggleSection(4))">
                                <i class="fa fa-chevron-right"/>
                                &nbsp;
                                UX/UI + Modeling Software
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[5].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[5].IsCollapsedHeader" @onclick="(()=>ToggleSection(5))">
                                <i class="fa fa-chevron-right"/>
                                &nbsp;
                                Cloud Deployment + Containers
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[6].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[6].IsCollapsedHeader" @onclick="(()=>ToggleSection(6))">
                                <i class="fa fa-chevron-right"/>
                                &nbsp;
                                Databases
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[7].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[7].IsCollapsedHeader" @onclick="(()=>ToggleSection(7))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Testing
                            </div>
                        </div>
                    }
                    @if (!UI.Sections[13].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[13].IsCollapsedHeader" @onclick="(()=>ToggleSection(13))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Why Programming?
                            </div>
                        </div>
                    }
                    *@
                    @*Contact*@
                    @if (!UI.Sections[34].IsVisible)
                    {
                        <div class="section-container">
                            <div class="section-header @UI.Sections[34].IsCollapsedHeader" @onclick="(()=>ToggleSection(34))">
                                <i class="fa fa-chevron-right" />
                                &nbsp;
                                Contact
                            </div>
                        </div>
                    }
                }
                <SectionedPageSectionsToggle PageId="1"/>
            </div>
        </div>
    </PageContent>
</DrawerPageTemplate>

@code {
    private bool testHistoryIsExpanded = false;

    [Parameter]
    public int SectionId { get; set; } = 0;

    protected override void OnInitialized()
    {
        UI.NavigateToSection(SectionId);
        UI.OnUiServiceChanged += UpdateThisComponent;
    }
    void IDisposable.Dispose()
    {
        UI.OnUiServiceChanged -= UpdateThisComponent;
    }
    private void UpdateThisComponent(string meaninglessRequirement) =>
        StateHasChanged();
    private void ToggleTestHistoryIsExpanded() =>
        testHistoryIsExpanded = !testHistoryIsExpanded;
    private void ToggleSection(int secId)
    {
        UI.ToggleSection(secId);
        Navigation.NavigateTo($"projectinfo/{secId}");
    }
}
