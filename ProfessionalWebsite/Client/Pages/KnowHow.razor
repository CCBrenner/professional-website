@page "/knowhow"

@inject NavService NavService
@implements IDisposable

<PageTitle>Know-How - Collyn Brenner</PageTitle>

<DrawerPageTemplate HeaderIconClasses="fa-solid fa-vial" HeaderText="Know-How">
    <DrawerContent>
        <DrawerNavLinkButton Href="knowhow#overview" ButtonText="Overview" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(0))" />
        <DrawerNavLinkButton Href="knowhow#approach" ButtonText="Approach" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(1))" />
        <DrawerNavLinkButton Href="knowhow#csharp" ButtonText="C#" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(2))" />
        <DrawerNavLinkButton Href="knowhow#javascript" ButtonText="JS" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(3))" />
        <DrawerNavLinkButton Href="knowhow#python" ButtonText="Python" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(4))" />
        <DrawerNavLinkButton Href="knowhow#php" ButtonText="PHP" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(5))" />
        <DrawerNavLinkButton Href="knowhow#styling" ButtonText="Styling" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(6))" />
        <DrawerNavLinkButton Href="knowhow#certifications" ButtonText="Certifications" OnClickCallback="(()=>NavService.SectionedPages[1].CollapseAllShowOne(7))" />
        <DrawerNavLinkButton Href="projects" IconClasses="fa-solid fa-diagram-project" ButtonText="Projects" />
        <DrawerNavLinkButton Href="collyn#contact" IconClasses="fa-solid fa-envelope" ButtonText="Contact" OnClickCallback="(()=>NavService.NavigateToCollapsibleSectionOfOtherPage(2, 6))" />
    </DrawerContent>
    <PageContent>
        <div class="sub-page-container">
            <div class="sections-container">
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[0].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[0].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(0))">
                            Overview
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[0].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[0].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[1].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[1].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(1))">
                            Languages
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[1].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[1].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[2].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[2].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(2))">
                            Stacks
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[2].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[2].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[3].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[3].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(3))">
                            Web Front-End
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[3].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[3].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[4].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[4].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(4))">
                            UX/UI - User Experience & User Interface plus Modeling Software
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[4].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[4].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[5].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[5].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(5))">
                            Cloud Deployment Solutions, Agile Project Management Software, + Containers
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[5].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[5].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[6].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[6].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(6))">
                            Databases
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[6].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[6].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[7].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[7].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(7))">
                            Testing
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[7].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[7].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[8].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[8].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(8))">
                            CLI
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[8].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[8].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[9].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[9].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(9))">
                            Programming Paradigms & Methodologies
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[9].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[9].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[10].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[10].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(10))">
                            Repositories
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[10].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[10].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[11].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[11].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(11))">
                            Game Development
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[11].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[11].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[12].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[12].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(12))">
                            Operating Systems
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[12].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[12].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[13].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[13].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(13))">
                            Why Programming?
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[13].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[13].IsCollapsedContent">
                            <p>Creating high-capability, highly-accessible technology. Devices that are most used are mobile devices because of high accessibility on-the-go, so I really think the future is in innovating mobile apps to have more space in the UI while maintaining excellent UX</p>
                            <p>Blazor + .NET 8’s customizable hybrid approach to web software infrastructure (having to do with performance)</p>
                            <p>Introduction of gaming UX/UI venturing  gaming as a competitive web UI-building tool (WebGL + Unity, could be enhanced by WASM/Emscripten)</p>
                            <p>You get to use logic in ways that enhance the livelihood of people. It has a curious way of creating more opportunities for flourishing in multiple exponential ways. The efficiency of reducing required workload when utilizing software technologies is something I find wonderful. It offers the opportunity to sculpt a repeatable user experience, which allows for the heavy lifting to be done once and based on reliable scientific discoveries for optimizing a user’s return on time invested while using the technology.</p>
                        </div>
                    </div>
                }
                @if (!NavService.SectionedPages[1].ASectionIsCurrentlyPromo
                || NavService.SectionedPages[1].ASectionIsCurrentlyPromo && NavService.SectionedPages[1].Sections[14].IsCurrentPromo)
                {
                    <div class="section-container">
                        <div class="section-header @NavService.SectionedPages[1].Sections[14].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(14))">
                            About This Web App [ Azure Web Service | SQL Server | ASP.NET | Blazor WASM ]
                            &nbsp;
                            @if(NavService.SectionedPages[1].Sections[14].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @NavService.SectionedPages[1].Sections[14].IsCollapsedContent">
                            <h3 style="text-align: center;">Conception</h3>
                            <br/>
                            <p>I started construction of this developer portfolio PWA (progressive web app) by first attempting to create a Blazor WASM open-source template that I planned to branch off from to create my own promotional developer portfolio. When I started this project I had never made anything open-source before. I saw making a boilerplate template for the Blazor framework as a potential networking opportunity. You can view the open-source template here: <a href="https://github.com/CCBrenner/MobileNavBlazorWasmTemplate" target="blank">Blazor WASM template</a>.</p>
                            <p>The open-source template was to employ responsive web design (RWD)  across the three major screen sizes. I wanted to build  navigation that translated across the three devices seamlessly but with the capability to navigate the user from anywhere in the web app to anywhere else, even if the web app built was a large one. This reverted me back to the old days where mobile navigation didn’t take you to another page with the first interaction, but instead offered a menu of where you wanted to go, requiring a minimum of 2 interactions minimum (and I wanted to make sure I tried my best to keep interaction count as close to 2 as possible, no more). I wanted it to have the best UI features that a navigation can have (since navigation is used everywhere in an app, it deserves to have some attention paid to its improvement). I wanted to maintain the kind of design philosophy (or “air”) that Blazor introduced with its starting template’s iconic collapsible sidebar navigation for desktop (which cannily resembles the sidebar of File Explorer on Windows), offering the ability to navigate within the page or to another page when clicked.</p>
                            <p>I also wanted to do something ambitious. I wanted to raise my web app within the DOM and be able to move the web app‘s housing container in multiple different ways while maintaining full responsiveness of the app within the container. The original idea was to use it as a way to market the installation of the PWA on mobile by displaying a fully-functional mobile aspect ratio PWA for desktop and tablet browsers, allowing the user to interact with the app in the browser while also being given the option to learn more about the app in the negative space of the viewport and to navigate straight to the app’s installation page by scanning a QR code (also located in the negative space) with a mobile device. This idea ended up turning into something else with the introduction of the tablet and desktop RWD breakpoints and UI. The mobile marketing functionality could not be maintained by resizing the housing container because the mobile breakpoints are controlled by CSS media queries, and these are dependent on the viewport size of the browser, particularly the width. Today I am unaware of a way to measure the width of a specific HTML element AND use it in a media query, which would solve this RWD problem. I opted to leave “options” in the template repository for the programmer to work towards the PWA promo site as well as branch the repo at the point of which I was finished with the PWA promo build before starting on the tablet and desktop UI renderings (for cases where the programmer is not interested in building to tablet or desktop and wants to build only for mobile PWA while also having the benefits of promo in the web browser).
                            </p>
                            <br/>
                            <h3 style="text-align: center;">Tools Used</h3>
                            <br/>
                            <h4>Programming Language: C#</h4>
                            <br/>
                            <h4>Blazor WASM (front-end)</h4>
                            <p>Blazor Web Assembly (WASM) is an unbiased, Single-Page App (SPA) front-end framework that allows for the writing of front-end code in C# which compiles to Web Assembly language at compile time. It allows for object-oriented programming (OOP) on the front-end without using JavaScript. It is interoperable with JavaScript, meaning you can still utilize JavaScript for functions and features that are not yet possible with C#. With Microsoft’s commitment to becoming a lead cloud service provider, and Blazor (WASM and Server) being their premier front-end framework, it isn’t hard to imagine that Microsoft is working very hard to invest into the innovation of Blazor and its counterpart, ASP.NET, technology. There are a number of things that are done differently in Blazor WASM than in other frameworks due to it using components, OOP, and not using JavaScript.</p>
                            <br/>
                            <h4>ASP.NET (back-end)</h4>
                            <p>ASP.NET is the go-to back-end framework for using Blazor WASM. ASP.NET allows for customization of data delivery at many different levels. In combination with Entity Framework Core as its object relational mapper (ORM) and Blazor as its front-end, this tech stack combination allows for data objects to be completely managed as C# objects, from database to user interface. ASP.NET has made large strides over the last few years, including the introduction of .NET Core which expands the number of platforms that can be targeted to include Linux OS and MacOS systems (with introduction of .NET Core). ASP.NET utilizes the MVC architecture pattern.</p>
                            <br/>
                            <h4>Unit Tests</h4>
                            <p>Blazor WASM allows for testing OOP code via unit tests in the same way as any other C# code in your projects. For this project, I used MSTest for my unit tests. Test Driven Design (TDD) was used for cases where complex logic is used. Components were left untested due to their simplicity and due to there being many components. If complexity requires a component to be tested then it will have unit tests added for it.</p>
                            <br/>
                            <h4>Authentication & Authorization - Auth0</h4>
                            <p>Auth0 is used in this application to demonstrate my ability to incorporate an authentication and authorization mechanism in the Blazor WASM / ASP.NET stack. It allows users to use some functions of the website that operate on and change the data on the backend, particularly in the database.</p>
                            <br/>
                            <h4>Azure Cloud PaaS (Web App) & Docker Containers</h4>
                            <p>In web development as a single-developer, a cloud platform as a service (PaaS) is going to be your best friend. For this project I researched multiple solutions, including Heroku, Linode, AWS, and Azure and boiled my options down to AWS Beanstalk (PaaS) and Azure App Service (PaaS). I chose Azure App Service due to the potential benefits of operating & learning within the same ecosystem (Microsoft) and the unknown benefits that it would bring, even if it costs more than other options. It would also allow me to spend less time worrying about server configuration. Both AWS Beanstalk and Azure Web App were chosen because they were PaaS and had capabilities to expand to IaaS (Infrastructure as a Service) capabilities on-demand. This was considered in anticipation of future projects I work on. It reaps long-term benefits to start well and start strong.</p>
                            <p>This web app is configured to update whenever updates are made to the web app’s DockerHub repository. This means that Docker files, images, and containers, along with a DockerHub repository, are being used to package, run, and update this web app with a good amount of automation with the ease of a “docker push” CLI command. In a nutshell, Docker containers are created from Docker images, which are created from Docker files. A project’s DockerFile contains commands for building an operating system environment, each command being its own “layer”. Docker layers decrease image build time by skipping layers that have not changed and begin building new layers at the first appearance of an updated layer when compared to a previous build of the image. Docker containers are a great tool for achieving app development and performance consistency across operating systems that are installed and run directly on hardware. Not only this, but it is a good step to have prepared if you want to move your web services to utilize more performance capabilities such as with Kubernetes (automated VM scaling based on resource demand). Docker containers are also fundamental and a great foundation when operating DevOps CI/CD pipelines.</p>
                            <br/>
                            <h3 style="text-align: center;">Noteworthy Aspects</h3>
                            <br/>
                            <h4>Navigation Bar (and the NavService singleton)</h4>
                            <p>The navigation bar takes one interaction to make a navigation panel fade into visibility, and one more for top-level navigation. The option to nest navigation options in an accordion menu is also built to be added to any navigation panel, so that in cases where a user wants to navigate to an even more specific part of the PWA, then the programmer can make this available to them in a structured manner. CSS transition fade also exists for hiding the navigation panels. There exists also a negative space element that appears that blurs and adds a translucent dark shade to the body/page content. This also exists to allow the user to tap/click a larger/closer  target to exit the navigation - a convenience factor. There was also care taken to the highlighting of the navigation buttons. The blur effect was made to assist the user when focusing on the navigation panel options.</p>
                            <p>A logic was applied so that the navigation would show you where you are at all times (as a good nav should). This includes the location changing when a specific navigation panel is visible temporarily. If the panel is closed, memory of the last location that was kept is then used to revert back automatically to showing the location of the current page. If the user is using a desktop computer, while they are hovering over a button before clicking it will cause the button to be highlighted while maintaining the highlight of the current location. This is done to indicate that the user’s mouse is in the right position to open that specific navigation panel. But once the user clicks that button, the location changes to the navigation panel of the button, making only the clicked button highlighted. All of the above highlight logic is maintained when clicking on a navigation panel button that routes the user to another page as well as when the user taps/clicks the negative space to close the navigation panel. These highlights are also updated when a button with navigation to a different section is tapped/clicked, so that the navigation is updated. All of this is achieved via a NavService class that is abstracted above the separations of the Shared components and the Page components in Blazor (which also means that it is above all component boundaries and can be used in all components; this functionality is possible because of what Service classes are originally intended to be used for: for inserting data acquired from the backend API for insertion into specific components via the dependency injection (DI) design pattern that Blazor WASM uses extensively).</p>
                            <br/>
                            <h4>Cross-page navigation to a section (HTML bookmarks substitute)</h4>
                            <p>Engineers often make technical assumptions that they believe are true only to find out later that their assumption doesn’t hold water. This reveals the necessity of programmers to allow room for skepticism about everything they believe they know to be true. More specifically, disproven assumptions appear when something that is believed to be true is true in more than one circumstance, but is not true in every circumstance. This is explained simply by Proverbs 21:11 which in summary shows that the gaining of wisdom (what is deemed “experience”) involves making a person less simple than they were before, or to put it another way, make them more enlightened. A person can be more simple in specific areas than other areas of which they are more wise (have a more complete understanding of the complex nature of something else).</p>
                            <p>I say all of this, because I was made less simple when building this project. I had assumed that I was going to be able to use an HTML navigation technique that involved using the id property of an HTML element to scroll the user to the element with that id via an anchor element that referenced it. I found out much too late that this functionality does not work everywhere bar none. I concluded with about 95% confidence that this is because HTML bookmarks (what the technique is called) only work for moving the entire web page to that location. It does not work within HTML elements that utilize scrolling within themselves (given to them by the CSS property-value “overflow-y: auto”). My requirement of raising my web app in the DOM made HTML bookmarks unusable.</p>
                            <p>I had to find another solution. I wanted to have pages that had multiple sections in them so that when viewing on desktop the user can click the sidebar and go straight to that section. Not being able to use bookmarks, I recognized I still had sections. Instead of moving the whole scrollable page, I found I could move the relevant content to the visible viewport with logic conditionals. Now if you click the sidebar, that section is “promoted” to the top of the page and all others appear collapsed below it in order. This meant that all sections had to be collapsible. I added the ability to collapse from the header of a section by clicking on it as well as a page-scoped control of the sections fully expanded or to be fully collapsed from the same button. Taking another development step forward, I updated the sections logic so that if the user ever had only one section open, it would be promoted to the top of the page just as if it had been clicked on from the sidebar. All of this works across screen sizes, with the exception of the absence of the sidebar for mobile and tablet screen sizes. This portfolio uses three pages with this functionality: “KnowHow”, “Collyn”, and “Invent”. Space was left for the future in which I either turn the other two pages in a sectioned page or if I decide to strip this project down one day and offer it as an open-source template for the benefit of programmers in the Blazor WASM community. The sectioned pages logic exists as its own class but is instantiated in the NavService class so as to reap the benefits of being modifiable across navigable pages. Yes, this means that state (properties and fields data) are being kept and used in the NavService service class. For keeping state in the NavService class to be useful in the context of Blazor as a single instance, this means particularly that the NavService class has to be “Singleton” scoped in the Program.cs file and injected as a class instead of as an interface for components that consume it (because an interface does not maintain any state within itself; the primary use case for a service class in Blazor WASM requires only functions (methods) for acquiring data from the backend API; Singleton instantiation as a rule and state in the service class are not required in the effective use of the service class’ primary use case).</p>
                            <br/>
                            <h4>Raised and Animated web app container</h4>
                            <p>Blazor separates layout classes as “Shared” components in their own directory, from the navigable page components of the PWA in the “Pages” directory. Since the Shared components are parents of the Page components (because they are for defining the layout and navigation of the project), the PWA had to be raised in the Shared directory, in the layout component. For certain functional reasons concerning navigation, I wanted to use a layering technique, with layers that are the full size of the housing container for the app. Some elements in these layers are positioned with CSS “position: relative”, to maintain position relative to the element’s parent element whenever the housing container resizes and moves. If there are multiple elements between the final positioned element then this kind of positioning must be done between every parent and child between each other, with correct height and width sizing too. Performing element positioning like this requires you to set the size of the container for child elements before positioning the container, because the container positioning is in part based on how large the container is, either vertically or horizontally. RWD would not be possible without the wonderful CSS width and height percentages which are based on the percentage of the child’s parent component width and height. There are more than 5 sibling elements which are children of the housing container which comprise the layers of the PWA. Additionally, forethought was taken in making sure that since CSS z-indexing is integer-based that enough possibilities for new layers with a new z-index could be added. Each layer is 10 z-index indices apart for this reason.</p>
                            <p>That’s good and all, but what about the animations? Well, the housing container is suspended horizontally and vertically in the center of its parent element using flexbox. (You can’t have a RWD site without flexbox; even Bootstrap uses flexbox.) With flexbox as the foundation to work on, animations are applied to the housing container using CSS animation @@keyframes. @@Keyframes allow you to change the properties of an element once, twice, thrice, more or an infinite number of times. Seamless looping is achieved by making the element’s property values the same at the start and finish of the animation loop. It is set up by percentages so that you can perform exact element state changes with no smoothness or you can ease in and/or out of animation changes. You can also change the beginning and end states of the animation if you want to (as can be seen with “EastIsUp” and “WestIsUp” animations). When you click a certain animation, a class that has an associated animation is applied to the housing container element, instantly starting the property changes being applied to the element. </p>
                        </div>
                    </div>
                }
                @if (NavService.SectionedPages[1].ASectionIsCurrentlyPromo)
                {
                    @if (!NavService.SectionedPages[1].Sections[0].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[0].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(0))">
                                Overview
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[1].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[1].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(1))">
                                Approach
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[2].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[2].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(2))">
                                C#
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[3].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[3].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(3))">
                                JS
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[4].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[4].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(4))">
                                Python
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[5].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[5].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(5))">
                                PHP
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[6].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[6].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(6))">
                                Styling
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!NavService.SectionedPages[1].Sections[7].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @NavService.SectionedPages[1].Sections[7].IsCollapsedHeader" @onclick="(()=>NavService.SectionedPages[1].ToggleCollapseSingle(7))">
                                Certifications
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                }
                <div class="toggle-all-sections-container">
                    <div class="toggle-all-sections" @onclick="NavService.SectionedPages[1].ToggleAllSections">
                        @if (NavService.SectionedPages[1].SectionsStatus == SectionsStatus.AllAreOpen)
                        {
                            <span class="fa-solid fa-down-left-and-up-right-to-center"></span>
                        }
                        else
                        {
                            <span class="fa-solid fa-up-right-and-down-left-from-center"></span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </PageContent>
</DrawerPageTemplate>

@code { 
    protected override void OnInitialized() =>
        NavService.OnPromoSectionOfPage += PromoteSection;
    void IDisposable.Dispose() =>
        NavService.OnPromoSectionOfPage -= PromoteSection;

    private void PromoteSection(int sectionIndex)
    {
        NavService.SectionedPages[1].CollapseAllShowOne(sectionIndex);
        StateHasChanged();
    }
}
