@page "/knowhow"
@page "/knowhow/{SectionId:int}"

@implements IDisposable

<PageTitle>Know-How - Collyn Brenner</PageTitle>

<DrawerPageTemplate HeaderIconClasses="fa-solid fa-flask" HeaderText="Know-How">
    <DrawerContent>
        <DrawerNavLinkButton Href="knowhow/0" ButtonText="Overview" OnClickCallback="(()=>App.NavigateToSection(0))" />
        <DrawerNavLinkButton Href="knowhow/14" ButtonText="About This Web App" OnClickCallback="(()=>App.NavigateToSection(14))" />
        <DrawerNavLinkButton Href="knowhow/16" ButtonText="Bee Hive Manager System/Game - Project" OnClickCallback="(()=>App.NavigateToSection(16))" />
        <DrawerNavLinkButton Href="knowhow/15" ButtonText="Hide & Seek Game - Project" OnClickCallback="(()=>App.NavigateToSection(15))" />
        <DrawerNavLinkButton Href="knowhow/33" ButtonText="Match Game - Project" OnClickCallback="(()=>App.NavigateToSection(33))" />
        <DrawerNavLinkButton Href="knowhow/3" ButtonText="Front-end" OnClickCallback="(()=>App.NavigateToSection(3))" />
        <DrawerNavLinkButton Href="knowhow/1" ButtonText="Back-end" OnClickCallback="(()=>App.NavigateToSection(1))" />
        <DrawerNavLinkButton Href="knowhow/4" ButtonText="UX/App + Modeling Software" OnClickCallback="(()=>App.NavigateToSection(4))" />
        <DrawerNavLinkButton Href="knowhow/5" ButtonText="Cloud Deployment + Containers" OnClickCallback="(()=>App.NavigateToSection(5))" />
        <DrawerNavLinkButton Href="knowhow/6" ButtonText="Databases" OnClickCallback="(()=>App.NavigateToSection(6))" />
        <DrawerNavLinkButton Href="knowhow/7" ButtonText="Testing" OnClickCallback="(()=>App.NavigateToSection(7))" />
        <DrawerNavLinkButton Href="knowhow/13" ButtonText="Why Programming?" OnClickCallback="(()=>App.NavigateToSection(13))" />
        <DrawerNavLinkButton Href="collyn/23" ButtonText="Contact" IconClasses="fa-solid fa-envelope" />
    </DrawerContent>
    <PageContent>
        <div class="sub-page-container">
            <div class="sections-container">
                @*Overview*@
                @if (App.Section.Sections[0].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[0].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(0))">
                            Overview
                            &nbsp;
                            @if(App.Section.Sections[0].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[0].IsCollapsedContent">
                            <h3 class="text-center">Overview</h3>
                            <p>
                                Software developers need to know many things to be effective in their crafting of software code. Not only this, but they need to have the solutions to many different problems locked down in memory, and not just static memory, but in working memory to be called in at the apprpriate times based on the best design philosophies and principles. For that which the software developer does not have locked in their memory they can make up for in different essential skills such as method of searching for something. These multi-step solutions - can be exponentially useful. This page will give you a sense of what technologies I have worked with thus far, however, please note that i am entirely open to learning about other technologies or more specific domains of a technology as well. Learning is only a matter of time. Changing dependencies shouldn't be something to fear. It should be seen as an opportunity for more to be made possible.
                            </p>
                            <h4 style="text-align: center;">Languages</h4>
                            <br/>
                            <p>
                                I first learned some JavaScript, then Python, then the entire language of JavaSCript, then PHP, and then chose C# as my primary programming language. I first started programming in 2018, I started programming substantially in the summer of 2019 and have been coding in C# since March 2022. It has been a treat to learn how effective using an OOP language can be. I prefer OOP languages now that I have more experience with C#, but I also have no problems with functional languages other than they are sometimes a bit hard to read due to being less intApptive.
                            </p>
                            <h4 style="text-align: center;">Stacks</h4>
                            <br/>
                            <p>
                                I have worked in the LAMP stack, Django-Apache-Python-MongoDB stack, MERN stack, and the ASP.NET + BlazorWASM + WindowsServer + SQLServer stack. I used the LAMP stack in one of my courses at TNU where I was first introduced to back-end coding in PHP. You can check it out more in <a href="#" target="_blank">this project (link)</a>. It was while I was learning about the Django framework for Python that I also learned about NoSql databases, ORMs, MongoDB, unit testing, MVC architecture, authentication and authorization implementation, data insertion into markup, and what a biased framework is. You can see more about this project <a href="#" target="_blank">here (link)</a>. Through my discovery of front-end framework SPAs, I suddenly wanted to hop on the YouTube bandwagon of learning ReactJS along with the MERN stack. I was all the while trying to find out what would be best tech and language to focus my learning efforts on. I never made any substantial project with MERN but I did get the full functionality of the stack to operate together in development and I got enough experience in it to know my way around the stack. I found learning about Node particularly helpful in improving my understanding of APIs and what tasks are designated to the backend as well as how packages can be essential parts of a software system as well as how to manage them properly.
                            <p>
                                It was through recommendations from my father-in-law to learn a "real" programming language and from my co-worker's insight into Nashville being primarily a Microsoft town in regards to its software prospects that I decided to start learning C# and landed in the Microsoft ecosystem (the company I work for also being in the Microsoft ecosystem as well). I learned so many things working in the stack mentioned above, from new ways to do SPAs, to C#'s use of Emscripten to compile to WebAssembly, to the architeture of ASP.NET in its varying levels of abstraction to make the code most managable through increased decoupling/mutability, to EFCore ORM to abstract away SQL language use, Blazor Server and WASM, services, repositories, DB contexts, Async-Await reqApprements and the reason for them, to component virtualization  - not to mention how many new concepts are introduced with strongly-typed OOP languages. Microsoft is showing its committment to investing in the future of software infrastructure and design with a focus on performance, and this makes me glad to be a C# developer. Of course, I am not opposed to working in other languages or with learning a new language where necessary. I am always willing to learn.
                            </p>
                            </p>
                            <h4 style="text-align: center;">Game Development (Unity)</h4>
                            <br/>
                            <p>
                                The course textbook that I worked through included Unity for its fun aspects that were somehwat of a break from straight learning of the C# language. These projects provided perspective into how C# can be used as an extention of other technologies to add functionality where functional complexity is certain to occur. It is because of C#'s compiler that Unity can utilize C# to create fast graphical applications. I will admit to having the urge to want to use 2D Unity in place of front-end web frameworks due to the design starting point. It seems that the future of development something like what Unity editor has come to be today. I am interested to see what the current WebGPU design and development efforts turn into.
                            </p>
                            <h4 style="text-align: center;">Operating Systems</h4>
                            <br/>
                            <p>
                                I have substantive experience with all three major operating systems. I am most versed in Windows (7, 10, 11). I am then about as equally versed in Linux as I am in MacOS, and I do mean the headless and graphical version of Linux as well. It should be noted that my Linux experience is not with Raspberry Pi or similar microcontrollers (as some other developers are), though I do have a thorough knowledge of Bash and prefer Bash as my primary CLI even on Windows. Each has their own strengths and advantages, and I will use whatever is useful for the task at hand.
                            </p>
                            <h4 style="text-align: center;">CLIs</h4>
                            <br/>
                            <p>
                                As the previous section has stated, Bash is my primary CLI of choice due to its being incorporated across the greatest number of platforms. I also have experience with the following CLIs: GitHub, Docker, CMD, MongoDB, dotnet, react, DjangoORM, node, and npm.
                            </p>
                            <h4 style="text-align: center;">Cloud Tools</h4>
                            <br/>
                            <p>
                                I generally prefer GSAppte tools to other alternatives due to their cloud accesibility and lack of reqApprement for a software license to use them. Other cloud tools that I have used in the past include: CyberSource (ecommerce transaction management), JDE (warehouse order management; greenscreen with weird navigation), Salesforce (CRM), Elastic Path (high level ecommerce order management), UseResponse (CRM), Jira (software project management), Zoho (complete business software sAppte), Mailchimp (online marketing and communication), UBS (background screening), DocUSign, QAppckBooks (Desktop and Online), and BlueSky (healthcare staffing software).
                            </p>
                        </div>
                    </div>
                }
                @*About This Web App*@
                @if (App.Section.Sections[14].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[14].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(14))">
                            About This Web App
                            &nbsp;
                            @if(App.Section.Sections[14].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[14].IsCollapsedContent">
                            <h3 style="text-align: center;">Conception</h3>
                            <br/>
                            <p>I started construction of this developer portfolio PWA (progressive web app) by first attempting to create a Blazor WASM open-source template that I planned to branch off from to create my own promotional developer portfolio. When I started this project I had never made anything open-source before. I saw making a boilerplate template for the Blazor framework as a potential networking opportunity. You can view the open-source template here: <a href="https://github.com/CCBrenner/MobileNavBlazorWasmTemplate" target="blank">Blazor WASM template</a>.</p>
                            <p>The open-source template was to employ responsive web design (RWD)  across the three major screen sizes. I wanted to bAppld  navigation that translated across the three devices seamlessly but with the capability to navigate the user from anywhere in the web app to anywhere else, even if the web app bApplt was a large one. This reverted me back to the old days where mobile navigation didn’t take you to another page with the first interaction, but instead offered a menu of where you wanted to go, reqAppring a minimum of 2 interactions minimum (and I wanted to make sure I tried my best to keep interaction count as close to 2 as possible, no more). I wanted it to have the best App features that a navigation can have (since navigation is used everywhere in an app, it deserves to have some attention paid to its improvement). I wanted to maintain the kind of design philosophy (or “air”) that Blazor introduced with its starting template’s iconic collapsible sidebar navigation for desktop (which cannily resembles the sidebar of File Explorer on Windows), offering the ability to navigate within the page or to another page when clicked.</p>
                            <p>I also wanted to do something ambitious. I wanted to raise my web app within the DOM and be able to move the web app‘s housing container in multiple different ways while maintaining full responsiveness of the app within the container. The original idea was to use it as a way to market the installation of the PWA on mobile by displaying a fully-functional mobile aspect ratio PWA for desktop and tablet browsers, allowing the user to interact with the app in the browser while also being given the option to learn more about the app in the negative space of the viewport and to navigate straight to the app’s installation page by scanning a QR code (also located in the negative space) with a mobile device. This idea ended up turning into something else with the introduction of the tablet and desktop RWD breakpoints and App. The mobile marketing functionality could not be maintained by resizing the housing container because the mobile breakpoints are controlled by CSS media queries, and these are dependent on the viewport size of the browser, particularly the width. Today I am unaware of a way to measure the width of a specific HTML element AND use it in a media query, which would solve this RWD problem. I opted to leave “options” in the template repository for the programmer to work towards the PWA promo site as well as branch the repo at the point of which I was finished with the PWA promo bAppld before starting on the tablet and desktop App renderings (for cases where the programmer is not interested in bApplding to tablet or desktop and wants to bAppld only for mobile PWA while also having the benefits of promo in the web browser).
                            </p>
                            <br/>
                            <h3 style="text-align: center;">Tools Used</h3>
                            <br/>
                            <h4>Programming Language: C#</h4>
                            <br/>
                            <h4>Blazor WASM (front-end)</h4>
                            <p>Blazor Web Assembly (WASM) is an unbiased, Single-Page App (SPA) front-end framework that allows for the writing of front-end code in C# which compiles to Web Assembly language at compile time. It allows for object-oriented programming (OOP) on the front-end without using JavaScript. It is interoperable with JavaScript, meaning you can still utilize JavaScript for functions and features that are not yet possible with C#. With Microsoft’s commitment to becoming a lead cloud service provider, and Blazor (WASM and Server) being their premier front-end framework, it isn’t hard to imagine that Microsoft is working very hard to invest into the innovation of Blazor and its counterpart, ASP.NET, technology. There are a number of things that are done differently in Blazor WASM than in other frameworks due to it using components, OOP, and not using JavaScript.</p>
                            <br/>
                            <h4>ASP.NET (back-end)</h4>
                            <p>ASP.NET is the go-to back-end framework for using Blazor WASM. ASP.NET allows for customization of data delivery at many different levels. In combination with Entity Framework Core as its object relational mapper (ORM) and Blazor as its front-end, this tech stack combination allows for data objects to be completely managed as C# objects, from database to user interface. ASP.NET has made large strides over the last few years, including the introduction of .NET Core which expands the number of platforms that can be targeted to include Linux OS and MacOS systems (with introduction of .NET Core). ASP.NET utilizes the MVC architecture pattern.</p>
                            <br/>
                            <h4>Tests</h4>
                            <p>Blazor WASM allows for testing OOP code in the same way you would test any other C# code in your projects on the back-end. MSTest is the testing utility used for the projects of this web app. Testing in this project was affected by my learning curve in testing regarding the distinction between unit tests (code coverage concept) and test-driven development (TDD) principles. Stated simply, I had thought that TDD included the concept of code coverage as a percentage. It does not.
                            </p>
                            <p>    
                            What TDD actually prescribes is a process where tests are written before code is written to prove code functionality and flexibilty while preserving the ability to refactor the code without reqAppring tests to change every time the code changes. As a bonus you get tests that you can run to check code functionality at any time plus you get improved seperation of concerns (encapsulation) between "producer" code and consuming code. TDD pays attention were testing matters most: the borders between pieces of code that have distinct responsibilities from each other.
                            </p>
                            <p class="btn btn-primary" @onclick="ToggleTestHistoryIsExpanded">Click to @(testHistoryIsExpanded ? "hide" : "view") test progression for this project.</p>
                            @if (testHistoryIsExpanded)
                            {
                                <p> 
                                Testing for this project went as such:
                                </p>
                                <p> 
                                (1) An attempt at TDD was originally made for a number of parts of this web app (particularly the NavService service). The ideas of code coverage philosophy initially overshadowed and obsurred my understanding of how to effectively utilize tests while maintaining the biggest strength of software: mutabilty. TDD was supposed to accomplish this for me. While trying to use what I thought was TDD, I ran into a problem. I was getting really bogged down in tests with no ROI prospects. I was becoming discouraged and demoralized. Almost every change in the code that I made made reqAppred a change in the tests. A major refactoring reqAppred completely new tests for all code within the large scope of the refactoring. It didn't make sense to me based on the raving reviews of TDD by other programmers online. The ROI for my time wasn't manifesting, and that seems like a big problem from the business side when considering enterprise developers who supposedly use TDD daily. Something was off.
                                </p>
                                <p> 
                                (2) After major refactoring in an effort to optimize, simplify and augment code capabilities, a better solution was sought for. "Safety nets" as bug-fixing solutions were found as a preferred solution over unit test code coverage because (A) they do not set up barriers that end up creating at least double the work for the programmer with ineffective testing (checking that the code does what I said it does, line-for-line, which aren't really tests), & (B) they instead offer a means for spending more time in the code by making code that informs developers of the issue to such an extent that the bug can easily and qAppckly be fixed. The safety nets include the reqAppred qAppck-release pipeline as well as qAppck-reversal of release mechanisms if large issue presented themselves. It is expected that some customers might experience these bugs, but it is an accepted cost as an understanding that the customer should understand that software is a work in-progress that they are a part of. This "safety net" approach encourages the programmer to spend more time in the code, not distrated or discouraged by code coverage unit tests, with a higher perceived risk if things go wrong. It is a motivational tool on the part of the programmer because they understand that big problems need to be mitigated as a top priority and that smaller bugs can be resolved through their appearance in production where necessary. Of course, if bugs can be caught before production this is preferred. Still, this isn't the best solution since it leaves error correction to be visible to the user, and most companies are able to better mitigate this. Another alternative to error handling must exist still, and I still had not cracked the code of how awesome TDD is - I needed to understand how TDD was awesome.
                                </p>
                                <p> 
                                    (3) I felt I hadn't qAppte understood the hype of programmers that loved to code using TDD. I perceived that I had been doing something wrong concerning TDD if my experience was so much worse than theirs, even despite the supposed skill gap between those who are used to programming in TDD and those who are new to it. A YouTuber whose channel is named "Continuous Delivery" brought me to realize how wrong I had been about TDD, and how easily I had missed the point and purpose of TDD (<a href="https://www.youtube.com/watch?v=W40mpZP9xQQ&t=545s" target="_blank">click here to see video</a>). I had in fact been introduced to the concept of TDD in an unclear manner through the project textbook Head First C#. TDD was introduced there as writing tests first at every level of a class dependency hierarchy, with the basic premise of Red, Green, Refactor (Uncle Bob's Clean Code lessons: <a href="https://www.youtube.com/watch?v=7EmboKQH8lM&list=PLmmYSbUCWJ4x1GO839azG_BBw8rkh-zOj" target="_blank">link</a>). What clarified this for me is what Continuous Delivery had said combined with what Uncle Bob Martin said about TDD. Uncle Bob pointed out that as your code gets more complex, your tests should become more abstract. The consumer is on a need-to-know basis, and the consumer shouldn't need to know anything about the object's implementation details - so why should the test that is testing the consumer methods be reqAppred to know any of the implementation details of the object? Both should know only what they are able to use the object/method for and not be reqAppred to know anything else. This keeps code simple and modular; it is encapsulation done correctly. This is the shining point of TDD. The tests that are produced in the TDD process are a side effect, even though they are still very useful.
                                </p>
                                
                            <p class="btn btn-primary" @onclick="ToggleTestHistoryIsExpanded">Click to @(testHistoryIsExpanded ? "hide" : "view") test progression for this project.</p>
                            }
                            <br/>
                            <p>
                                Unfortunately concerning this project, TDD is a process that is meant to be used before any code is written. At the time of writing, I had gotten through manual testing and then later using the safety net approach that it was after I had done the bulk of the desired programming when I finally discovered how TDD is awesome. It is no use to cry over spilt milk. There is still something to be said about the long-term effects of having not used TDD. I will still add tests to the code that would have ended up with tests using TDD as a minimum, and from there I will add tests where deemed necessary or good to have as checks on the code. I understand that corporate production code needs more testing than this, but for my purposes of ensuring code that currently works stays working I would think tests need to prove their usefulness to warrant my time and effort.
                            </p>
                            <p>
                                I am coming to find (and am currently learning more about) how and why TDD being taught instead as BDD (behavior-driven development) is much more useful for programmers in understanding the original point of TDD. BDD and TDD attempt to do the same thing, but with BDD the focus is on the behavior of the system as described using natural language instead of being hyperfocused on using tests to achieve the same ends bu through an unclear means. Both seek to prioritize and meet the reqApprements of a system using tests to arrive at a given system behavior, but BDD holds that achieving the behavior is more important than how the behavior is achieved. After all, the behavior of the system is what the user cares about, not the implementation details, so since the focus is on system behavior (outcome) and not on the tests (means to unclear ends), there is no confusion about which code is most important to to use tests to drive code design for: the code that is closest to the user, which is the highest level code in the system. The tests for the highest level code are always going to be the most abstract tests since they are the farthest away from the implementation details of how exactly the code does what it does. You can change BDD code easily and know whether the implementation changes have affected the user's experience in one way or another based on what the tests in BDD are testing. BDD tests stand the test of time until the behavior is changed from what it currently is. The code that accomplishes the same behavior can be refactored without needing to change any tests, saving a lot of time for the developer to bAppld other things instead of worrying about code coverage. In fact, testing the highest level code for correct system behavior is code coverage of the greatest amount of code without having to write as much code than if you were to write tests for every block of code. You only need tests as much you would like specifics into what went wrong when a test fails. More tests can give a clearer picture, but you don't need to know if everything is working exactly as expected all of the time. If you write BDD tests and expect that there is code that is not being covered in the test, yet you get the correct behavior, I wonder if that uncovered code (if it exists) is contributing any useful function to your system behavior. If it isn't then it can be eliminated with confidence, affording a systematic means for making your system more lean and more meaningful. if you can't develop software iteratively without changing test all the time, you're doing TDD wrong - but I don't have to make this point if I teach you what BDD is because you just get it implictly based on what BDD is, because it makes sense. Teaching BDD has a higher probability of programmers getting the original intent of TDD right than teaching TDD does. Teach TDD as BDD - that alias should prove to be useful for the majority of programmers, and it will cause all programmers to be better off than they were without BDD.
                            </p>
                            <br/>
                            <h4>Authentication & Authorization - Auth0</h4>
                            <p>Auth0 is used in this application to demonstrate my ability to incorporate an authentication and authorization mechanism in the Blazor WASM / ASP.NET stack. It allows users to use some functions of the website that operate on and change the data on the backend, particularly in the database.</p>
                            <br/>
                            <h4>Azure Cloud PaaS (Web App) & Docker Containers</h4>
                            <p>In web development as a single-developer, a cloud platform as a service (PaaS) is going to be your best friend. For this project I researched multiple solutions, including Heroku, Linode, AWS, and Azure and boiled my options down to AWS Beanstalk (PaaS) and Azure App Service (PaaS). I chose Azure App Service due to the potential benefits of operating & learning within the same ecosystem (Microsoft) and the unknown benefits that it would bring, even if it costs more than other options. It would also allow me to spend less time worrying about server configuration. Both AWS Beanstalk and Azure Web App were chosen because they were PaaS and had capabilities to expand to IaaS (Infrastructure as a Service) capabilities on-demand. This was considered in anticipation of future projects I work on. It reaps long-term benefits to start well and start strong.</p>
                            <p>This web app is configured to update whenever updates are made to the web app’s DockerHub repository. This means that Docker files, images, and containers, along with a DockerHub repository, are being used to package, run, and update this web app with a good amount of automation with the ease of a “docker push” CLI command. In a nutshell, Docker containers are created from Docker images, which are created from Docker files. A project’s DockerFile contains commands for bApplding an operating system environment, each command being its own “layer”. Docker layers decrease image bAppld time by skipping layers that have not changed and begin bApplding new layers at the first appearance of an updated layer when compared to a previous bAppld of the image. Docker containers are a great tool for achieving app development and performance consistency across operating systems that are installed and run directly on hardware. Not only this, but it is a good step to have prepared if you want to move your web services to utilize more performance capabilities such as with Kubernetes (automated VM scaling based on resource demand). Docker containers are also fundamental and a great foundation when operating DevOps CI/CD pipelines.</p>
                            <br/>
                            <h3 style="text-align: center;">Noteworthy Aspects</h3>
                            <br/>
                            <h4>Navigation Bar (and the App.SectionMgmt singleton)</h4>
                            <p>The navigation bar takes one interaction to make a navigation panel fade into visibility, and one more for top-level navigation. The option to nest navigation options in an accordion menu is also bApplt to be added to any navigation panel, so that in cases where a user wants to navigate to an even more specific part of the PWA, then the programmer can make this available to them in a structured manner. CSS transition fade also exists for hiding the navigation panels. There exists also a negative space element that appears that blurs and adds a translucent dark shade to the body/page content. This also exists to allow the user to tap/click a larger/closer  target to exit the navigation - a convenience factor. There was also care taken to the highlighting of the navigation buttons. The blur effect was made to assist the user when focusing on the navigation panel options.</p>
                            <p>A logic was applied so that the navigation would show you where you are at all times (as a good nav should). This includes the location changing when a specific navigation panel is visible temporarily. If the panel is closed, memory of the last location that was kept is then used to revert back automatically to showing the location of the current page. If the user is using a desktop computer, while they are hovering over a button before clicking it will cause the button to be highlighted while maintaining the highlight of the current location. This is done to indicate that the user’s mouse is in the right position to open that specific navigation panel. But once the user clicks that button, the location changes to the navigation panel of the button, making only the clicked button highlighted. All of the above highlight logic is maintained when clicking on a navigation panel button that routes the user to another page as well as when the user taps/clicks the negative space to close the navigation panel. These highlights are also updated when a button with navigation to a different section is tapped/clicked, so that the navigation is updated. All of this is achieved via a App.SectionMgmt class that is abstracted above the separations of the Shared components and the Page components in Blazor (which also means that it is above all component boundaries and can be used in all components; this functionality is possible because of what Service classes are originally intended to be used for: for inserting data acqAppred from the backend API for insertion into specific components via the dependency injection (DI) design pattern that Blazor WASM uses extensively).</p>
                            <br/>
                            <h4>Cross-page navigation to a section (HTML bookmarks substitute)</h4>
                            <p>Engineers often make technical assumptions that they believe are true only to find out later that their assumption doesn’t hold water. This reveals the necessity of programmers to allow room for skepticism about everything they believe they know to be true. More specifically, disproven assumptions appear when something that is believed to be true is true in more than one circumstance, but is not true in every circumstance. This is explained simply by Proverbs 21:11 which in summary shows that the gaining of wisdom (what is deemed “experience”) involves making a person less simple than they were before, or to put it another way, make them more enlightened. A person can be more simple in specific areas than other areas of which they are more wise (have a more complete understanding of the complex nature of something else).</p>
                            <p>I say all of this, because I was made less simple when bApplding this project. I had assumed that I was going to be able to use an HTML navigation technique that involved using the id property of an HTML element to scroll the user to the element with that id via an anchor element that referenced it. I found out much too late that this functionality does not work everywhere bar none. I concluded with about 95% confidence that this is because HTML bookmarks (what the technique is called) only work for moving the entire web page to that location. It does not work within HTML elements that utilize scrolling within themselves (given to them by the CSS property-value “overflow-y: auto”). My reqApprement of raising my web app in the DOM made HTML bookmarks unusable.</p>
                            <p>I had to find another solution. I wanted to have pages that had multiple sections in them so that when viewing on desktop the user can click the sidebar and go straight to that section. Not being able to use bookmarks, I recognized I still had sections. Instead of moving the whole scrollable page, I found I could move the relevant content to the visible viewport with logic conditionals. Now if you click the sidebar, that section is “promoted” to the top of the page and all others appear collapsed below it in order. This meant that all sections had to be collapsible. I added the ability to collapse from the header of a section by clicking on it as well as a page-scoped control of the sections fully expanded or to be fully collapsed from the same button. Taking another development step forward, I updated the sections logic so that if the user ever had only one section open, it would be promoted to the top of the page just as if it had been clicked on from the sidebar. All of this works across screen sizes, with the exception of the absence of the sidebar for mobile and tablet screen sizes. This portfolio uses three pages with this functionality: “KnowHow”, “Collyn”, and “Invent”. Space was left for the future in which I either turn the other two pages in a sectioned page or if I decide to strip this project down one day and offer it as an open-source template for the benefit of programmers in the Blazor WASM community. The sectioned pages logic exists as its own class but is instantiated in the App.SectionMgmt class so as to reap the benefits of being modifiable across navigable pages. Yes, this means that state (properties and fields data) are being kept and used in the App.SectionMgmt service class. For keeping state in the App.SectionMgmt class to be useful in the context of Blazor as a single instance, this means particularly that the App.SectionMgmt class has to be “Singleton” scoped in the Program.cs file and injected as a class instead of as an interface for components that consume it (because an interface does not maintain any state within itself; the primary use case for a service class in Blazor WASM reqAppres only functions (methods) for acqAppring data from the backend API; Singleton instantiation as a rule and state in the service class are not reqAppred in the effective use of the service class’ primary use case).</p>
                            <br/>
                            <h4>Raised and Animated web app container</h4>
                            <p>Blazor separates layout classes as “Shared” components in their own directory, from the navigable page components of the PWA in the “Pages” directory. Since the Shared components are parents of the Page components (because they are for defining the layout and navigation of the project), the PWA had to be raised in the Shared directory, in the layout component. For certain functional reasons concerning navigation, I wanted to use a layering technique, with layers that are the full size of the housing container for the app. Some elements in these layers are positioned with CSS “position: relative”, to maintain position relative to the element’s parent element whenever the housing container resizes and moves. If there are multiple elements between the final positioned element then this kind of positioning must be done between every parent and child between each other, with correct height and width sizing too. Performing element positioning like this reqAppres you to set the size of the container for child elements before positioning the container, because the container positioning is in part based on how large the container is, either vertically or horizontally. RWD would not be possible without the wonderful CSS width and height percentages which are based on the percentage of the child’s parent component width and height. There are more than 5 sibling elements which are children of the housing container which comprise the layers of the PWA. Additionally, forethought was taken in making sure that since CSS z-indexing is integer-based that enough possibilities for new layers with a new z-index could be added. Each layer is 10 z-index indices apart for this reason.</p>
                            <p>That’s good and all, but what about the animations? Well, the housing container is suspended horizontally and vertically in the center of its parent element using flexbox. (You can’t have a RWD site without flexbox; even Bootstrap uses flexbox.) With flexbox as the foundation to work on, animations are applied to the housing container using CSS animation @@keyframes. @@Keyframes allow you to change the properties of an element once, twice, thrice, more or an infinite number of times. Seamless looping is achieved by making the element’s property values the same at the start and finish of the animation loop. It is set up by percentages so that you can perform exact element state changes with no smoothness or you can ease in and/or out of animation changes. You can also change the beginning and end states of the animation if you want to (as can be seen with “EastIsUp” and “WestIsUp” animations). When you click a certain animation, a class that has an associated animation is applied to the housing container element, instantly starting the property changes being applied to the element. </p>
                        </div>
                    </div>
                }
                @*Bee Hive Mgmt System*@
                @if (App.Section.Sections[16].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[16].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(16))">
                            Bee Hive Manager System/Game - Project
                            &nbsp;
                            @if (App.Section.Sections[16].IsCollapsedHeader == "collapsed-header")
                            {
                                <i class="fa fa-chevron-left" />
                            }
                            else
                            {
                                <i class="fa fa-chevron-down" />
                            }
                        </div>
                        <div class="section-content @App.Section.Sections[16].IsCollapsedContent">
                            <h3 style="text-align: center;">Bee Hive Manager System/Game</h3>
                            <div class="proj-desc-buttons">
                                <a href="beehivemgmtsystem" class="btn btn-primary" @onclick="(()=>App.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/tree/main/ProfessionalWebsite/Client/Classes/BeeHiveMgmtSystem" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <p>April 26th, 2023</p>
                            <h4>Introducing the Hive</h4>
                            <br />
                            <p>
                                This project was a part of Chapter 6 of <i>Headfirst C# (4th Edition)</i> by Andrew Stallman and Jennifer Greene. The chapter covered the topic of inheritance in-depth. This project is designed to show how inheritance can be used to reqAppre members to be present in child classes through use of a regular or abstract class. In this system, the user is the Queen Bee who inherits from the Bee class. All bees inherit from the Bee class, and each Bee has a job to do and an amount of honey that they consume per shift of work done before doing their job. If they don’t eat, they don’t work - but they will eat what they can. The bees are pretty lazy, so they won’t work unless the QueenBee tells them to as part of her job. If she doesn’t eat (which she of course eats first), then no one else eats and the hive goes bankrupt.
                            </p>
                            <p>
                                There are three jobs in the hive: Honey Manufacturer, Nectar Collector, and Egg Nurse. When the QueenBee lays eggs, EggNurses nurse eggs until they become Unassigned Worker Bees. The QueenBee is responsible for assigning the worker bees in a manner that keeps her hive running smoothly. The Honey Manufacturer Been makes honey each shift from currently available nectar. If there is no nectar, no honey gets made.The Nectar Collector collects nectar from flowers in the field. All of the jobs of the bees work in a number of economic loops, as can be seen below
                            </p>
                            <div class="wpf-image">
                                <img src="media/images/beeHiveGame/BeeHiveFeedbackLoopsDiagram.png">
                            </div>
                            <br />
                            <br />
                            <h4>Bee Hive BAppld Progression</h4>
                            <br>
                            <p>
                                This project was originally written with a WPF front-end (which is coded in XAML). It looked like this once it was all prepared:
                            </p>
                            <div class="wpf-image">
                                <img src="media/images/beeHiveGame/BeeHiveGameWPF.png">
                            </div>
                            <p>
                                The classes were bApplt in a normal progression, from the HoneyVault static class, to the Bee as an abstract class, to the three worker types that inherit Bee, and finally to the Queen who is able to do the most out of all the classes. It is the QueenBee’s inherited method “WorkNextShift” method that gets called when the user clicks the “WorkNextShift” button, causing a series of actions to take place in the hive from this single action.
                            </p>
                            <p>
                                The system had two modes: a stepwise mode and a real-time mode. The real-time mode involved a timer applied to the “Work Next Shift” button which would simulate being clicked every 1.5 seconds. When the game was moved from WPF (XAML) to Blazor WASM for this WPF, the DispatchTimer was replaced with System. Timers.Timer.
                            </p>
                            <p>
                                The initial project was not intended to be a full game (that was outside of its scope). When it was migrated and adapted to Blazor WASM for this PWA, those aspects of gameplay needed to be introduced into the game. The readability of a plain text paragraph that updated each shift was not ideal for an enjoyable user experience (and it could definitely look nicer too). A BeeHiveController class was introduced to free the data from its plaintext paragraph to have specific styles and positions applied to each data point. (It is understood that controllers are not generally supposed to be responsible for data manipulation, but they are normally used for transferring prepared data to a view. In this case the controller does both. This is due to lack of a better term.)
                            </p>
                            <p>
                                As developments in the game’s view occurred, I left semi-prepared versions of points where the game was somewhat complete as that view’s current idea. This is for the benefit of the user to compare improvements over the progression of the view’s development. In developing the view, reliability was of the utmost concern. Things like spacing, font-size, RWD, related information location, visibility of rates and addition of data markers which bAppld on top of those rates are all examples of the kinds of improvements that went into the game.
                            </p>
                            <p>
                                Late in development when the timer for Blazor WASM was being implemented, the issue of updating the view component became a problem. Since updating the whole component looked to be a problem, the view for version 3 was moved to a separate component. This led to splitting up the view logic across two components. The logic was extracted and housed as a C#-coded singleton with references added for each component. By this point, what I had not realized is that 2 consecutive reqApprements had eliminated the need for the first reqApprement. So I ended up moving the version 3 view component markup back into its original component and deleting the other component once I was sure I no longer needed it (this eliminated unneeded complexity). The root of the issue is that the data values were being obtained through C3 property Get methods, and these Get methods had nothing to trigger their method when data in the “model” of the game was updated. What accomplished the triggering of the methods is an event tied to the timer’s elapsed method, so that after all values were updated in the “model”, the event would be triggered, and the subscribed method in the code section of the Razor component can invoke the “StateHasChanged()” razor method that re-renders the component manually - presenting the updated rates in the component.
                            </p>
                            <br />
                            <h4>Project Take Aways</h4>
                            <br>
                            <p>
                                Singletons and DI: Migrating this game and developing its view brought me to appreciate how useful the Singleton and DI design patterns are when used together (I learned about how to code Singletons during this project while learning from ChatGPT). I was able to utilize C#-coded Singletons to house a single instance of code that I wanted referenced in multiple places. I came to see that the App.SectionMgmt class which I had created for the PWA is useful the way it is because it is a Singleton. I discovered that I don’t need to keep the App.SectionMgmt class as a registered Blazor WASM service after all - it can be its own code and then be removed from a domain of the project that is supposed to be solely responsible for data request and validation.
                            </p>
                            <p>
                                Tabs Add Space: This is now the second place where I have added a tab-like functionality to the view. Since I am very interested in the development of the future of PWA for mobile devices, and since space seems to be an issue when creating RWD for mobile screens - it appears that in-view tabs have the ability to create space in a compact and easily navigable fashion. You can even use a single component to accomplish this with C#/Razor component conditionals if you are using Blazor WASM. I am now wondering (since I have just witnessed Windows 11’s update to their File Explorer, giving it tabs) that there are likely App improvements that can make tabs appear nicer or more obvious, the way browsers present them. (When I was in college, I read in a UX/App book that the best way to do RWD is to start with mobile first. It is much easier to add than to remove things once you have added them. When you aim to optimize for mobile, you are putting the largest user category first (mobile users). When you design mobile-first, you are left with much more space for larger screens, and this is because the designer tries to make the most out of the little space that he has first - a tighter constraint - than if he were to start with more and move to less. No, start with less, and later on the acqAppsition of more space will be adequately appreciated and utilized even better than previously.)
                            </p>
                            <br />
                            <h4>Upcoming Plans</h4>
                            <br>
                            <p>
                                At this point in time I have created a new PanelMgmt singleton for potentially managing all panels used in the project, so that when one is selected, if any others are open then they will be closed before opening the panel selected. Logic for classes applied to each panel are housed in PanelMgmt (including for activated appearance of the selected button), relieving single components from having to implement their own view panel logic. A new panel’s logic can be created and labeled in the PanelMgmt singleton class and plugged in wherever it is needed through adding a PanelMgmt reference to the component. The App.SectionMgmt class already manages its own panels in this way, so after I migrate the App.SectionMgmt class to be an unregistered C#-coded singleton I plan to migrate the App.SectionMgmt panels to the PanelMgmt singleton, and then with a reference to PanelMgmt in the App.SectionMgmt class, the App.SectionMgmt class can tell the PanelMgmt class what to do when certain navigation actions occur.
                            </p>
                            <p>
                                A lot of ideas for this BeeHive game emerged, and the top ideas I want to implement at some point include (1) settings with checkboxes that can make certain rates not visible, (2) add ability to change the game-defining rate and conversion values that were given by the project’s author (as well ability to revert to defaults),  I would like to (3) add a “Worker Lineup” of all workers and the order in which they will work when the next shift starts (since  worker order does matter; a series of small actions does not have the same effect as the sum of the actions happening at one single point in time), and (4) add a “Transaction Ledger” for all transactions that occur for each worker, in order, showing a running balance of the total amount of honey (and nectar, space permitting) that is currently in the Vault.
                            </p>
                        </div>
                    </div>
                }
                @*Hide & Seek*@
                @if (App.Section.Sections[15].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[15].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(15))">
                            Hide & Seek Game - Project
                            &nbsp;
                            @if(App.Section.Sections[15].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[15].IsCollapsedContent">
                            <h3 style="text-align: center;">Hide and Seek Game</h3>
                            <div class="proj-desc-buttons">
                                <a href="hideandseek" class="btn btn-primary" @onclick="(()=>App.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/tree/main/ProfessionalWebsite/Client/Classes/HideAndSeekProject" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <br/>
                            <h4>Introduction</h4>
                            <br/>
                            <p>This project was introduced at the end of Chapter 10 of the Headfirst C#, 4th Edition textbook course by Andrew Stellman and Jennifer Greene (12 chapters total). Chapter 10 covered how to read and write files, particularly covering how to use streams in C#.  If you would like to view the project’s PDF instructions which were used to make this application, please <a href=”https://github.com/head-first-csharp/fourth-edition/blob/master/Downloadable_projects/Chapter_10_project.pdf” target=”blank”>click here (link)</a>.</p>
                            <br/>
                            <h4>Hide and Seek Game Design</h4>
                            <br>
                            <p>The classic childhood game hide and seek is featured in this application. The user moves through, searching for five virtual players that are hiding in a number of different hiding spots throughout the three-story house. The game was originally designed to be played as a command line interface (CLI) game (consisting of text-prompts by the application and text response/commands from the user playing the game). After the game was fully bApplt for CLI, it was then converted to having a graphical user interface (GApp) in Blazor WebAssembly, a front-end web framework which uses C# instead of JavaScript. When this game was added to this website (<a href=”#” target=”blank”>click here</a> to go to the project) the original App was kept and was then given an improved GApp that was much more responsive across screen sizes (a concern of keeping this progressive web app (PWA) responsive web design (RWD) compliant).</p>
                            <p>This project in particular highlights the use of a StreamWriter to save and load mid-game data to the user’s local machine. Test-driven design (TDD) was used in the development of the application (a process which involves writing unit tests first, making them fail, then writing code until the tests no longer fail). The classes that were foundational dependencies (meaning all other classes rely on their being functional) were coded first, and then the classes that use those classes, which are dependencies for other classes, were bApplt and so on. This is the supposed “proper” way of coding OOP (object-oriented programming) entities when a dependency tree exists.</p>
                            <p>The classes that are used are the GameController, House, Location, LocationWithHidingPlaceSome, and Opponent classes. It also includes a Direction enum. An enum is a list of limited variations of the same object type. The enums infer/suggest a relationship and possible interchangeability between the enum’s values to be used somewhere in the code. The name of the enum, in this case “Direction”, becomes the data type that each of these values share. In this case, rooms (“Location”s) are linked together. Each location has a list of exits. Each exit is a passageway (the link) between rooms. Each exit is a Direction value. For two Locations that are linked, each Location has an exit with the opposite corresponding Direction value. For instance, the Entry has a “Direction.Out” exit that leads to the Garage, while the Garage has a “Direction.In” exit that leads to the Entry. The House class is a static class (a class that reqAppres all class members to be static; it cannot be instantiated but can be used by referring directly to the class, such as “House.GetLocationNames()”). The House class houses all locations that the player can navigate through. Since the Locations (rooms) are instantiated in the House class, this means all Location connections are created in the House class as well. Certain locations have additional members which include a hiding space where multiple opponents (instances of the Opponent class) can hide. These “LocationWithHidingPlace” instances inherit from Location and make this possible.</p>
                            <p>All of the above is accessible via the GameController. The Game Controller provides the interface for the view/program to obtain the necessary text or data feedback that the game involves. In the CLI version of this Hide and Seek game, the game program exists in a loop which runs through generating a prompt with current game status, available exits, if there is a hiding place in their current location, and then asks the player where they want to go. The user responds by checking an available hiding place or with one of the available directions - <b>not</b> with the name of the room (an important distinction for later versions of the game). At any point in time the user can save the game with the “save {filename}” command or the “load {filename}” command for games that were saved previously. These functions are included in the GameController class.</p>
                            <br/>
                            <h4>Moving from CLI to GApp</h4>
                            <br>
                            <p>The project authors suggested switching the CLI to having a GApp so that the developer (me) could gain experience converting a program to using a new interface. I opted to do so, choosing to use Blazor WASM for the implementation. It was not difficult to move the project assets (mostly the classes) over to the Blazor project. I experienced a learning curve with Blazor when utilizing data binding particularly for the list of available exits which the user selects first before moving to a new location via the selected exit (two separate interactions). It was a simple GApp and it gave the game a 2D interface for interaction - a step up in user experience.</p>
                            <br/>
                            <h4>Moving v1 GApp to This PWA with v2 GApp</h4>
                            <br>
                            <p>When adding the game to this progressive web app (PWA) I decided to include the Original App so as to compare it to the newly created App (called “Current App”) that I wanted for this PWA. I had increased in knowledge skills with Blazor since the first version of the App was made, and I came to find that the first version App was not responsive enough. It needed to be fully responsive for this PWA (<a href=”#” target=”blank”>read more (link)</a>).</p>
                            <p>To improve the user experience (UX) of the player, I chose to utilize a virtual GApp controller made up of the directions the player could select and to have the text prompts and  game status all appear in the screen above it - kind of like a handheld gaming device of the 1990s and 2000s. This maximized the amount of screen space I could utilize by minimizing the space taken up by the controls of the original App -  something that would be particularly important for mobile users when considering readability and minimized number of reqAppred interactions. You will notice on this point that the user no longer has to select AND move - the player can move with one tap or click instead of two. Feedback is something that can be useful for users, and in this case feedback about which directions they are able to go through are presented to them by lighting up the available exit directions in the controller (a feedback function that virtual controllers have much more readily available than physical controllers do). This is important to note: a key aspect of the original game is that the user chooses the <u>direction</u> they want to go and <u>not</u> the location. Locations can change with every room the player visits which would not be able to be captured as information feedback to the user through the controller (at least not without major modifications to the controller, ultimately rAppning the controller design due to lack of space for more than 2 letters) - but if the player navigates using a limited number of directions then the same directions can be presented in the controller without issue when moving between locations. This early design decision in the first version of the game by the project authors made a huge impact on the final App, which in turn affects the experience the player receives.</p>
                        </div>
                    </div>
                }
                @*Match Game*@
                @if (App.Section.Sections[33].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[33].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(33))">
                            Match Game - Project
                            &nbsp;
                            @if(App.Section.Sections[33].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[33].IsCollapsedContent">
                            <h3 style="text-align: center;">
                                Match Game
                            </h3>
                            <div class="proj-desc-buttons">
                                <a href="matchgame" class="btn btn-primary" @onclick="(()=>App.UpdatePanelsWhenNavigating(2))">
                                    Go To Game
                                </a>
                                &nbsp;
                                <a href="https://github.com/CCBrenner/professional-website/blob/main/ProfessionalWebsite/Client/Pages/MatchGame.razor.cs" target="_blank" class="btn btn-primary">
                                    View Code
                                </a>
                            </div>
                            <p>May 11th, 2023</p>
                            <h4>Introduction</h4>
                            <br />
                            <p>
                                This was one of the first projects introduced in <i>Headfirst C# (4th Edition)</i> by Andrew Stallman and Jennifer Greene. It is a simple match game with modes for playing with an added timer. It is a straight-forward project, so let’s take a look at it.
                            </p>
                            <br />
                            <h4>Match Game for WPF (using XAML)</h4>
                            <br>
                            <p>
                                This matching game was originally bApplt in Windows Presentation Fountain (WPF), a framework for bApplding Windows Desktop applications using the XAML language for the App markup. The reasoning for using WPF is to get experience with XAML which is still used in many C# projects, including Android and iOS mobile apps using Xamarin Forms (which will discontinue support May 1, 2024). .NET MAApp (Multi-platform App User Interface) which also utilizes XAML is poised to take Xamarin Forms’ place, but that is getting off topic. This project involved multiple steps of construction, including setting up the project, initial configuration of the App, writing the program code, linking the code to the App components, and finally adding a timer so that users can race against the clock for adding competitiveness.  The App itself utilizes a grid layout mechanic for positioning of elements, and then you can position based on the grid cell location and the position within the cell. Data values are rendered/updated in the App via events such as MouseDown. These events are able to be generated from VS Code. This is one example of a number of useful options for XAML App being both text and App changeable. The program tracks if the game is currently happening or not, it assigns random emojis that exist in a list to different TextBlocks, conditional logic manages what happens when a TextBlock is clicked, and a timer is updated every interval that passes by. The timer used is specific to XAML (DispatchTimer).
                            </p>
                            <br />
                            <h4>Match Game for Blazor WASM</h4>
                            <br>
                            <p>
                                Migrating this matching game to an entirely new App was a task due to the large amount of coupling the XAML App was utilizing in the WPF app. Luckily this is only a small program, so the damage is minimal, but it afforded a rewrite of about 70% of the code (since the Blazor component wouldn’t be using events to update App state the way WPF does, plus the DispatchTimer being specific to WPF and therefore needing a replacement). All events for App interactions were removed and replaced with methods that were tied to @@onclick event handlers in HTML elements (part of how Razor components work). The App was rebApplt from scratch in HTML/Razor components. An HTML Table was used to preserve the grid appearance of the game, with a number of App aesthetic improvements. The game moved into more of an OOP direction with the introduction of the Block class for the 16 interactive cells and further the MatchGameStatus enum. The DispatchTimer was replaced with a System.Timers.Timer and accompanying Elapsed method to be called at every timer interval. To avoid issues with highlighting the emoji when a user clicks or taps on a cell, a div was placed over the visible element to receive the action while the underlying element updates the showing  emoji accordingly. Razor conditionals to change the rendering of the top information section from being one section to two separate sections for greater readability through separation of items. The entire new App implements responsive web design (RWD), making it playable on all screens with a consistent user experience (UX).
                            </p>
                        </div>
                    </div>
                }
                @*Frontend*@
                @if (App.Section.Sections[3].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[3].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(3))">
                            Front-End
                            &nbsp;
                            @if(App.Section.Sections[3].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[3].IsCollapsedContent">
                            <p>
                                My introduction to coding was through FreeCodeCamp using JavaScript. This led me naturally into developing web sites with HTML and CSS along with JS. I would say I have a particular affinity for clean, functional, modular user interfaces that look very nice by themselves and then make the user feel really good through simplicity and handling things for them in ways that communicate thoughtfulness. It is important to make designs intApptive when making interfaces, and this usually means gleaning from many different users and the decisions they make when navigating a GApp. It seems as though the key to an intApptive interface is learning through interaction, enabled by simplistic design, and finding things where you expect them to be. I am glad we now have moved into the age of SPAs and component-based architecture because it allows for App components to be reused in the same way classes are, reducing code which generally translates into less for the programmer to manage (in many cases).
                            </p>
                            <p>
                                I have worked with plain front-end languages, LAMP stack (which utilizes PHP for serving the front-end App to the client), React, Django, React Native, and Blazor WASM. I enjoy providing a pleasant and enjoyable experience to the user because I like making things that I can use. When an interface I have made or helped to improve delights me, I am proud of my work and gain a sense of fulfillment and appreciation for the work I’ve done.
                            </p>
                            <p>
                                The user interface seems to be one of the most under-rated tools for communicating who and what a company is and is about. Through an excellent App the user can tell exactly how legit/credible a company is, how serious they are about what they do, and if it looks great, the user may enjoy just having a lovely experience. Of course, the software has to work well too, but these kinds of things are often left as a secondary thought and not followed up in their proper time.</p><p>I could talk a whole lot about the workings of front-end/back-end communication. For this, please see the API section of this page (KnowHow > API).
                            </p>
                        </div>
                    </div>
                }
                @*Back-end*@
                @if (App.Section.Sections[1].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[1].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(1))">
                            Back-end
                            &nbsp;
                            @if(App.Section.Sections[1].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[1].IsCollapsedContent">
                            <br/>
                            <h3 class="text-center">Back-end</h3>
                            <p style="color: red; text-align: center;">SECTION NOT FINISHED - NEEDS TNU CLASS CONTENT, EXPERIENCE, AND MODELING SOFTWARE</p>
                            <br/>
                            <p>My back-end experience consists of a number of different back-end technologies, only one of which I dove into great depth with using. The first three I gained experience with are PHP (LAMP stack), Django (full-stack framework for Python), Node + Express (MERN stack). Since I have now committed myself to being a .NET developer, I have become most experienced in ASP.NET Core (using .NET 6 & 7). </p>
                            <p>I was first introduced to bac-end development during a class I was taking in university and we utilized the LAMP stack which uses Linux, Apache, MySQL, and PHP. Due to the scope of the class being on back-end development, we utilized a program called MAMP to set up the linux environment that the back-end would run on. The code was in PHP and we learned the fundamentals of back-end development and how to work with a DBMS for MySQL. We learned how to work with SQL string commands within PHP and how to perform data validation. It was a good introduction.</p>
                            <p>From there I was not yet wise enough to understand that I should learn a lot about one thing, so I learned how to use the full-stack Django framework. Django operates on top of an integrated MVC architecture, though it is not exactly MVC as most people understand it (which took me some time to learn). I also came to learn through Django that design intentions are important to consider. Django seemed to be primarily sAppted for blog-style websites and web applications. It could serve well in a number of other respects, but it was opinionated in that way. I did not enjoy the number of strange error messages I was confronted with while using it too (granted, it was my first time really working through error messages on my own which can be a terribly hopeless thing for a beginning programmer). I utilized it in my college senior capstone project and then abandoned it as something to use for any future projects. I at least learned a number of other things along the way, such as how Python relies on technologies outside of Python, in this case Django and the host server which was linux (as most servers are). I learned about authorization and authentication, pagination, MVC, more about data validation, and a few other things as well.</p>
                            <p>Knowing I no longer wanted to work in Django, I searched the internet for a more reliable framework (as a new programmer does) and decided upon the most popular stack out there, the MERN stack. I worked through one application set up, became familiar with it, did about as much in it as I did with Django, and moved on, feeling hopeless. I had yet to bAppld something I wanted to make.</p>
                            <p>After developing a stronger relationship with my father-in-law, I was turned on to C# as a “real language” by him (compared to JS which he believes is not a real programming language). So I learned the C# language through a Headfirst C# online textbook, became acquainted with OOP and how to do OOP correctly, and over time developed a better framework for how to program well. Some people pit functional programming and OOP against each other, but I see both in each and for that reason I don’t see why there needs to be a feud over it. As long as you are achieving clean and readable code, then I think the programmer and everyone who has to deal with that code is winning. For instance, functional programming says that it is best to have small functions that are reusable so that you can call function after function such that that function remains the same and does a single thing. This means you end up with many functions. The functions being numerous is helpful because you have more descriptions for what is happening through each function name. This also means that when you create many functions, you have to understand exactly what you are making the function for. Once you have many functions, or even while you are creating many functions, you then have the ability in OOP to organize all of the functions based on what they are related to. In OOP we have the ability to use the “static” keyword to create functions that are available to the whole namespace and which are categorized by the class they exist in without the need for creation of any instance of the class. This is a very functional aspect that OOP allows for. In a similar way as classes alow for static functions, you could also say a language like JS allows for modular code via file-scoped function declarations. If you think about it, that’s what we do in OOP by convention anyways - we use one class per file to keep code modular. OOP allows for the additional classification of functions to either be instance-scoped or namespace scoped, which adds benefits over only being module/file-scoped. Don’t undervalue your ability to communicate via function names and through comments! I prefer having strong/explicit typing over dynamic typing specifically for when a project grows and reaches a threshold size, at which point organization and complexity need to be managed well.</p>
                            <p>Getting back to back-end in ASP.NET, I have come to find EF Core as a great tool for working with databases. I mostly have worked with SQL Server and plan on testing out EF Core with PostGreSQL (for performance reasons) and CosmosDB (for document-based DB benefits over SQL (aggregates & multiple DBs without the need for sharding the DB like with SQL)). I have come to learn about the factory pattern, the repository pattern, the proof-of-work pattern, the controller pattern, about minimal APIs, clean architecture (domain driven design, DDD), creating custom exceptions, asynchronous functions (why they are necessary, useful and what they reqAppre when configuring), service registration, options design pattern, adapter pattern, data validation, and more.</p>

                        </div>
                    </div>
                }
                @*UX/App + Modeling Software*@
                @if (App.Section.Sections[4].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[4].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(4))">
                            UX/App + Modeling Software
                            &nbsp;
                            @if(App.Section.Sections[4].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[4].IsCollapsedContent">
                            <br/>
                            <h3 class="text-center">UX/App + Modeling Software</h3>
                            <p style="color: red; text-align: center;">SECTION NOT FINISHED - NEEDS TNU CLASS CONTENT, EXPERIENCE, AND MODELING SOFTWARE</p>
                            <br/>
                            <h4>User Experience is Most Important Other than Being Functional</h4>
                            <br/>
                            <p>I believe the best user experiences incorporate intApptive interfaces that are easy to navigate, present the most relevant information to the user wherever possible, and which take care to minimize needless additional actions. Attractiveness and dynamic features can add to the experience. All of these are ways that a programmer can communicate thoughtfulness to the user. Thoughtfulness is a lot like kindness embedded in design decisions that many users are able to appreciate. A user is able to appreciate your product if they can see clear indications that enhancements to enjoyable aspects were added and barriers to enjoyment were removed. These statements are especially true if the product incorporates elegance and offers a pleasant experience.</p>
                            <p>Steve Jobs and Apple did this very well with the iPhone, particularly with their advertisements of the product featuring Jony Ive, the iPhone’s Chief Design Officer. Jony Ive always stressed the <em>elegance</em> and the <em>simplicity</em> of the iPhone’s design. There is no argument that users enjoy something that perceptually is really nice and very simple, even if it isn’t simple when considering all of its functions. Einstein once said, “I have deep faith that the principle of the universe will be beautiful and simple”. The above simplification of the user’s experience involves reducing the reqAppred psychological work and physical work on the part of the user. Physical work includes but is not limited to the number of interactions a user has to make in order to perform certain functions. Psychological work includes but is not limited to interactions that may not be hard to do necessarily but which either reqAppre a lot of cognitive effort or which reqAppre the user to think in a way that causes negative feelings to arise, whether stress or agitation, or increased reqApprement to focus with no apparent reward, etc.</p>
                            <p>In MDA game design methodology (Mechanics, Dynamics, and Aesthetics), this means that the design (mechanics) is affecting the user's feelings (aesthetics) because the mechanics of the game force the user into performing certain actions or sequences of actions (dynamics). MDA is more than boiling down to design, actions and feelings, but this is one way to use MDA to analyze game design. It is the developer’s problem of if/when their users do not like using what the developer bApplt. To bAppld something that makes money for the makers, the business side of product development has to be considered. Engineers and business managers ultimately share the same goals: To promote an excellent user experience with their product.</p>
                            <p>With a lackluster user experience comes decreased sales of the product, or in subscription models, the loss of a customer/client. Video game production companies are astutely aware of this, but app designers and website bApplders may not consider this interplay of interface elements to be of much concern. A well-rounded experience reqAppres extra work and multiple iterations to achieve, but the payoff is in user experience, which can translate to word-of-mouth advertising if your users like what you made. It could be because it is really nice, or easy to use, or it might be something they may find useful for their purposes.</p>
                            <p>The most effective way to go about creating the best experience for your users is by bApplding a prototype and hearing from and observing your users first-hand. Engaging with your (potential) customers helps you get to know what they are like, how they think, what their tendencies are, what they like and don’t like, why they like your product - all incredibly valuable insights into the product development (iteration) process.</p>
                            <p>Yet, software developers don’t always see customer engagement as necessary. They often don't care all that much about the customer. They would rather not go through the discomfort of having their ideas ripped apart by first-person commentary on the product - yet that is a person’s real opinions about your product. That which is real is what needs to be dealt with to gain real success with the real thing that is being made.</p>
                            <p>I love gathering insight, I love bApplding things, and I love helping people. If what I'm bApplding doesn’t help people, I want to gain more insight as to why. This insight is needed to bAppld better things that help people more (or helps more people). If the thing I am bApplding is used by others to bAppld better things, then it would be wise for me to acqAppre information about the end result of my customer’s product; in this case, my product’s success is not just about bApplding my product’s intended end. It is an outcome-focused orientation, one intrinsically characterized by long-term, interdependence thinking. Technology is utilitarian in its nature, meaning it is utilized as the means to some ends. If the technology does not achieve its intended end, then it is valueless as a means to that end. There aren’t many people willing to trade something of value for something of less value. Something of no value is not worth considering.</p>
                            <br/>
                            <h4>Mentality is Key - The Developer May Lack Consideration for what they stand to Gain</h4>
                            <br/>
                            <p>If the developer does not want to talk to the customer/client, perhaps they are not considering what they would gain from doing so. User insights are like development solutions: you learn each insight once and then it sticks with you through the reinforcement of common sense. The developer gets the added benefit of seeing from the user’s perspective. Insights improve accuracy of decisions made in the product’s development. In software development, you have to make a lot of decisions, and decisions about design rank very high if not at the top of the list of important decisions.</p>
                        </div>
                    </div>
                }
                @*Cloud Deployment + Containers*@
                @if (App.Section.Sections[5].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[5].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(5))">
                            Cloud Deployment + Containers
                            &nbsp;
                            @if(App.Section.Sections[5].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[5].IsCollapsedContent">
                            <p>Kubernetes container management and microservices architecture has come to dominate the cloud services industry even to the degree of creating several types of technical certifications for roles within specific cloud infrastructure providers such as AWS and Azure. Docker has become the #1 container tool used by devops teams and other development teams for the streamlining of development and production release pipelines. Leveraging this kind of infrastructure and technology is proving to be high in controllability based on fluctuating application service demands, and so it has become very useful to have knowledge of how development inside of containers benefits a company or organization. The software developer does well when he or she learns how a tool like Docker works to bring many benefits to an application.</p>
                            <p>The cloud has consolidated itself away from the older models of on-site technology infrastructure management. Cloud infrastructure serves many clients instead of just one, and in so doing has increased the level of security and quality of service that can be offered to business. This has also introduced tiered service levels based on the amount of customizability/control/responsibility a business wants to have over the cloud resources it pays to use. The three largest categorizations of cloud services are IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service). IaaS offers the most control, SaaS offers the most out-of-the-box pre-configuration and least control, while PaaS falls somewhere between the other two with benefits and drawbacks of both of the other options.</p>
                            <p>When talking about containers, we are talking about virtual machine environments that can be created on-demand through the use of a template which exists in the form of a container image. Docker offers a way to create such images so that the creation of the container is consistent across every container based on the container image used. The image is composed of layers. The layers allow Docker to reduce the amount of work by skipping over the layers that have not changed and beginning with the first layer in the sequence that has changed (in the case of updating a container). However, the layers are always read in order, so that if layer 3 has changed but layer 5 has not, Docker will begin bApplding at layer three, then go to 4 then go to 5 and so on until all layers have been completed to create the container environment.</p>
                            <p>If you are still unsure what a container is, it is a virtual machine that acts the same way a physical server would only it allows a physical server to host many VMs on a single physical server, providing higher and more efficient use of the physical server’s resources than if only one application were installed on it without the use of a virtual machine container.</p>
                            <p>A number of .NET project templates offer the ability to create a project with a preconfigured Docker file included with the project. This makes for ease of setup by skipping the reqApprement to manually configure a Dockerfile for your projects. Docker also allows you to manage multiple Dockerfiles through use of a Dockercompose file. </p>
                        </div>
                    </div>
                }
                @*Databases*@
                @if (App.Section.Sections[6].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[6].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(6))">
                            Databases
                            &nbsp;
                            @if(App.Section.Sections[6].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[6].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @*Testing*@
                @if (App.Section.Sections[7].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[7].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(7))">
                            Testing
                            &nbsp;
                            @if(App.Section.Sections[7].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[7].IsCollapsedContent">
                            <UnderConstruction />
                        </div>
                    </div>
                }
                @*Why Programming?*@
                @if (App.Section.Sections[13].IsVisible)
                {
                    <div class="section-container">
                        <div class="section-header @App.Section.Sections[13].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(13))">
                            Why Programming?
                            &nbsp;
                            @if(App.Section.Sections[13].IsCollapsedHeader == "collapsed-header")
                            {   <i class="fa fa-chevron-left"/>   }
                            else
                            {   <i class="fa fa-chevron-down"/>   }
                        </div>
                        <div class="section-content @App.Section.Sections[13].IsCollapsedContent">
                            <p>Creating high-capability, highly-accessible technology. Devices that are most used are mobile devices because of high accessibility on-the-go, so I really think the future is in innovating mobile apps to have more space in the App while maintaining excellent UX</p>
                            <p>Blazor + .NET 8’s customizable hybrid approach to web software infrastructure (having to do with performance)</p>
                            <p>Introduction of gaming UX/App venturing  gaming as a competitive web App-bApplding tool (WebGL + Unity, could be enhanced by WASM/Emscripten)</p>
                            <p>You get to use logic in ways that enhance the livelihood of people. It has a curious way of creating more opportunities for flourishing in multiple exponential ways. The efficiency of reducing reqAppred workload when utilizing software technologies is something I find wonderful. It offers the opportunity to sculpt a repeatable user experience, which allows for the heavy lifting to be done once and based on reliable scientific discoveries for optimizing a user’s return on time invested while using the technology.</p>
                        </div>
                    </div>
                }
                @*mocks of above sections for user clickability (user won't tell difference between the mocks & originals)*@
                @if (App.Section.SectionedPages[1].ASectionIsCurrentlyPromo)
                {
                    @if (!App.Section.Sections[0].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[0].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(0))">
                                Overview
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[14].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[14].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(14))">
                                About This Web App
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[16].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[16].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(16))">
                                Bee Hive Manager System/Game - Project
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    } 
                    @if (!App.Section.Sections[15].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[15].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(15))">
                                Hide & Seek Game - Project
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[33].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[16].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(33))">
                                Match Game - Project
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[3].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[3].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(3))">
                                Front-End
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[4].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[4].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(4))">
                                UX/App + Modeling Software
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[5].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[5].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(5))">
                                Cloud Deployment + Containers
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[6].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[6].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(6))">
                                Databases
                                &nbsp;
                                <i class="fa fa-chevron-left"/>
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[7].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[7].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(7))">
                                Testing
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                    @if (!App.Section.Sections[13].IsCurrentPromo)
                    {
                        <div class="section-container">
                            <div class="section-header @App.Section.Sections[13].IsCollapsedHeader" @onclick="(()=>App.ToggleSection(13))">
                                Why Programming?
                                &nbsp;
                                <i class="fa fa-chevron-left" />
                            </div>
                        </div>
                    }
                }
                <SectionedPageSectionsToggle PageId="1"/>
            </div>
        </div>
    </PageContent>
</DrawerPageTemplate>

@code
{
    [CascadingParameter]
    public App? App { get; private set; }

    [Parameter]
    public int SectionId { get; set; } = 0;

    private bool testHistoryIsExpanded = false;

    protected override void OnInitialized()
    {
        App.Nav.OnNavMgmtUpdated += UpdateThisComponent;
        App.NavigateToSection(SectionId);
        App.Section.OnSectionMgmtChanged += UpdateThisComponent;
    }
    void IDisposable.Dispose()
    {
        App.Nav.OnNavMgmtUpdated -= UpdateThisComponent;
        App.Section.OnSectionMgmtChanged -= UpdateThisComponent;
    }
    private void UpdateThisComponent(string meaninglessReqApprement) =>
        StateHasChanged();
    private void ToggleTestHistoryIsExpanded() =>
        testHistoryIsExpanded = !testHistoryIsExpanded;
}
