@using ProfessionalWebsite.Client.Classes.BeeHiveMgmtSystem;

@inject UIService UIService
@implements IDisposable

@page "/beehivemgmtsystem"

<PageTitle>BeeHive Management System - Collyn Brenner</PageTitle>

<ProjectsPageTemplate>
    <div class="positioning-container">
        <div class="game-container">
            <div class="game-container-items @UIService.PanelMgmt.Panels[1].BlurStatus">
                <div class="topmost-buttons">
                    <a href="knowhow/16">
                        <div class="top-corner-button-containers">
                            <span class="fa-solid fa-circle-info"></span>
                        </div>
                    </a>
                    <div>
                        <button class="btn @BeeHiveView.Instance.interfaceClasses[0]" @onclick="(()=>BeeHiveView.Instance.SetVisibleUI(ActiveUI.WPF))">WPF</button>
                        <button class="btn @BeeHiveView.Instance.interfaceClasses[1]" @onclick="(()=>BeeHiveView.Instance.SetVisibleUI(ActiveUI.V1))">V1</button>
                        <button class="btn @BeeHiveView.Instance.interfaceClasses[2]" @onclick="(()=>BeeHiveView.Instance.SetVisibleUI(ActiveUI.V2))">V2</button>
                        <button class="btn @BeeHiveView.Instance.interfaceClasses[3]" @onclick="(()=>BeeHiveView.Instance.SetVisibleUI(ActiveUI.V3))">V3</button>
                    </div>
                    @if (BeeHiveView.Instance.VisibleUIIsV3)
                    {
                        <div class="top-corner-button-containers @UIService.PanelMgmt.Panels[1].PanelButtonStatus">
                            <div class="settings-button" @onclick="(()=>UIService.PanelMgmt.ActivatePanel(1))">
                                <span class="fa-solid fa-gear"></span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="top-corner-button-containers" style="background-color: rgba(0,0,0,0);"></div>
                    }
                </div>
                @if (BeeHiveView.Instance.VisibleUI == ActiveUI.WPF)
                {
                    <div class="wpf-image">
                        <img src="media/images/beeHiveGame/BeeHiveGameWPF.png">
                    </div>
                }
                else if (BeeHiveView.Instance.VisibleUI == ActiveUI.V1)
                {
                    <div class="text-prompts-container">
                        <div class="text-prompts">
                            <p class="status-report">
                                @((MarkupString)BeeHiveController.Instance.StatusReport)
                            </p>
                        </div>
                    </div>
                    <div class="controls">
                        <div class="controls-backdrop">
                            <select class="control-v1" style="background-color: #eee;" @bind="@workerType">
                                <option value="@(WorkerType.HoneyManufacturer)" class="text-center" style="padding: 10px 0px;">Honey Manufacturer</option>
                                <option value="@(WorkerType.NectarCollector)" class="text-center" style="padding: 10px 0px;">Nectar Collector</option>
                                <option value="@(WorkerType.EggCare)" class="text-center" style="padding: 10px 0px;">Egg Care</option>
                            </select>
                            <div class="control-v1" @onclick="(()=>BeeHiveController.Instance.AssignBee(workerType))">Assign Worker</div>
                            <div class="btn control-v1" style="background-color: rgba(0,0,128,1); color: #eee;" @onclick="BeeHiveController.Instance.WorkTheNextShift">
                                Work Next Shift
                            </div>
                        </div>
                    </div>
                }
                else if (BeeHiveView.Instance.VisibleUI == ActiveUI.V2)
                {
                    <div class="text-prompts-container-v2">
                        <div class="text-prompts-v2">
                            <div class="report">
                                <div class="text-center">Day @BeeHiveController.Instance.CurrentDay: Vault Report</div>
                                <div class="row-flex">
                                    <div class="field-flex">
                                        <div>Honey</div>
                                        <div>@BeeHiveController.Instance.VaultHoney</div>
                                    </div>
                                    <div class="field-flex">
                                        <div>Nectar</div>
                                        <div>@BeeHiveController.Instance.VaultNectar</div>
                                    </div>
                                </div>
                                @if (BeeHiveController.Instance.VaultNotification != "")
                                {
                                    <div class="row-flex">
                                        <div class="field-flex text-center" style="color: red;">
                                            @BeeHiveController.Instance.VaultNotification
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="report">
                                <div class="text-center">Day @BeeHiveController.Instance.CurrentDay: Queen Bee Report</div>
                                <div class="row-flex">
                                    <div class="field-flex">
                                        <div>Eggs</div>
                                        <div>@BeeHiveController.Instance.Eggs</div>
                                    </div>
                                    <div class="field-flex-arrow">=></div>
                                    <div class="field-flex">
                                        <div>Unassigned</div>
                                        <div>@BeeHiveController.Instance.UnassignedWorkersCount</div>
                                    </div>
                                </div>
                                <div class="row-flex">
                                    <div class="field-flex">
                                        <div>Honey<br/>Makers</div>
                                        <div>@BeeHiveController.Instance.HoneyManufacturers</div>
                                    </div>
                                    <div class="field-flex">
                                        <div>Nectar<br/>Collectors</div>
                                        <div>@BeeHiveController.Instance.NectarCollectors</div>
                                    </div>
                                    <div class="field-flex">
                                        <div>Egg<br/>Nurses</div>
                                        <div>@BeeHiveController.Instance.EggNurses</div>
                                    </div>
                                </div>
                                <div class="row-flex">
                                    <div class="field-flex">
                                        <div>Workers Total</div>
                                        <div>@BeeHiveController.Instance.WorkersTotal</div>
                                    </div>
                                    @*
                                    <div class="field-flex">
                                        <div>Cost Per Shift<br/>(units of Honey)</div>
                                        <div>@BeeHiveController.Instance.ConsumptionRate</div>
                                    </div>
                                    *@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="controls">
                        <div class="controls-backdrop-v2">
                            @if (BeeHiveController.Instance.HiveIsBankrupt)
                            {
                                <div class="try-again" @onclick="BeeHiveController.Instance.Reset">Try Again</div>
                            }
                            else
                            {
                                <div style="display: flex; flex-direction: column">
                                    <div class="selector-row">
                                        <div class="workertype-selector @BeeHiveView.Instance.workertypeButtonsClasses[0]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.HoneyManufacturer))">
                                            Honey Manufacturer
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.HoneyManufacturer)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                    <div class="selector-row">
                                        <div class="workertype-selector @BeeHiveView.Instance.workertypeButtonsClasses[1]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.NectarCollector))">
                                            Nectar Collector
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.NectarCollector)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                    <div class="selector-row">
                                        <div class="workertype-selector @BeeHiveView.Instance.workertypeButtonsClasses[2]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.EggCare))">
                                            Egg Care
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.EggCare)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="btn control-button-work-v2" @onclick="BeeHiveView.Instance.WorkShift">
                                    Work Next Shift
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (BeeHiveView.Instance.VisibleUI == ActiveUI.V3)
                {
                    <div class="text-prompts-container-v3 ">
                        <div class="text-prompts-v3">
                            <div class="report">
                                <div class="text-center">Day @BeeHiveController.Instance.CurrentDay: Vault Report</div>
                                <div class="row-flex-v3t">
                                    <div class="field-flex-v3">
                                        <div class="vault-honey-nectar">
                                            <div class="trajectories-v3">
                                                <span class="rates-and-conversions">
                                                    (
                                                    @if (BeeHiveController.Instance.HoneyTrajectory > 0)
                                                    {
                                                        <span>+</span>
                                                    }
                                                    @BeeHiveController.Instance.HoneyTrajectory
                                                    )
                                                </span>
                                            </div>
                                            <div class="vault-amounts">
                                                <div>
                                                    @BeeHiveController.Instance.VaultHoney
                                                </div>
                                                <div>Honey</div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="field-flex-v3">
                                        <div class="vault-honey-nectar">
                                            <div class="vault-amounts">
                                                <div>
                                                    @BeeHiveController.Instance.VaultNectar
                                                </div>
                                                <div>Nectar</div>
                                            </div>
                                            <div class="trajectories-v3">
                                                <span class="rates-and-conversions">
                                                    (
                                                    @if (BeeHiveController.Instance.NectarTrajectory > 0)
                                                    {
                                                        <span>+</span>
                                                    }
                                                    @BeeHiveController.Instance.NectarTrajectory
                                                    )
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @if (BeeHiveController.Instance.VaultNotification != "")
                                {
                                    <div class="row-flex-v3">
                                        <div class="field-flex text-center" style="color: red;">
                                            @BeeHiveController.Instance.VaultNotification
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="report">
                                <div class="text-center">Day @BeeHiveController.Instance.CurrentDay: Queen Bee Report</div>
                                <div class="row-flex-v3">
                                    <div class="field-flex-v3">
                                        <div>Queen</div>
                                    </div>
                                    <div class="text-center field-flex-arrow-v3 rates-and-conversions">
                                        =>
                                        <br />
                                        (@BeeHiveController.Instance.EggsPerShift)
                                    </div>
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.Eggs</div>
                                        <div>Eggs</div>
                                    </div>
                                    <div class="text-center field-flex-arrow-v3 rates-and-conversions">
                                        =>
                                        <br />
                                        (@BeeHiveController.Instance.EggToUnassignedConversionRate)
                                    </div>
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.UnassignedWorkersCount</div>
                                        <div>Unassigned</div>
                                    </div>
                                </div>
                                <div class="row-flex-v3">
                                    <div class="field-flex-v3">
                                        <div>Flowers</div>
                                    </div>
                                    <div class="text-center field-flex-arrow-v3 rates-and-conversions">
                                        =>
                                        <br />
                                        (@BeeHiveController.Instance.NectarCollectionRate)
                                    </div>
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.VaultNectar</div>
                                        <div>Nectar</div>
                                    </div>
                                    <div class="text-center field-flex-arrow-v3 rates-and-conversions">
                                        (-@BeeHiveController.Instance.NectarReductionRate)
                                        <br />
                                        =>
                                        <br />
                                        (+@BeeHiveController.Instance.HoneyAdditionRate)
                                    </div>
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.VaultHoney</div>
                                        <div>Honey</div>
                                    </div>
                                </div>
                                <div class="row-flex-v3">
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.VaultHoney</div>
                                        <div>Honey</div>
                                    </div>
                                    <div class="text-center field-flex-arrow-v3 rates-and-conversions">
                                        =>
                                        <br />
                                        (@BeeHiveController.Instance.ConsumptionRate)
                                    </div>
                                    <div class="field-flex-v3">
                                        <div class="text-center">Energy for<br>All Bees</div>
                                    </div>
                                </div>

                                <div class="row-flex-v3">
                                    <div class="field-flex-v3">
                                        <div>@BeeHiveController.Instance.WorkersTotal</div>
                                        <div>Workers</div>
                                    </div>
                                </div>
                                <div class="row-flex-v3">
                                    <div class="field-flex-v3">
                                        <div class="text-center">
                                            As the Queen, no one works if you can't eat.
                                            <br />
                                            (Your hunger: @BeeHiveController.Instance.QueensHunger units of Honey/Shift)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="controls">
                        <div class="controls-backdrop-v3">
                            @if (BeeHiveController.Instance.HiveIsBankrupt)
                            {
                                <div class="try-again" @onclick="BeeHiveController.Instance.Reset">Try Again</div>
                            }
                            else if (BeeHiveController.Instance.TimerIsBeingUsed && !BeeHiveController.Instance.TimerRunning)
                            {
                                <div style="color: #eee; padding: 18px;">Pressing "Start" will reset your game.</div>
                                <br />
                                <div class="start-with-timer-on" @onclick="BeeHiveView.Instance.StartTimer">Start</div>
                                <br />
                                <div style="color: #eee; padding: 18px;">To play un-timed version, deselect "Timed Game Play" setting in settings.</div>
                            }
                            else
                            {
                                <div style="display: flex; flex-direction: column">
                                    <div class="selector-row">
                                        <div class="workertype-selector-v3 @BeeHiveView.Instance.workertypeButtonsClasses[0]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.HoneyManufacturer))">
                                            Honey Manufacturer (@BeeHiveController.Instance.HoneyManufacturers)
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.HoneyManufacturer)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                    <div class="selector-row">
                                        <div class="workertype-selector-v3 @BeeHiveView.Instance.workertypeButtonsClasses[1]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.NectarCollector))">
                                            Nectar Collector (@BeeHiveController.Instance.NectarCollectors)
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.NectarCollector)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                    <div class="selector-row">
                                        <div class="workertype-selector-v3 @BeeHiveView.Instance.workertypeButtonsClasses[2]" @onclick="(()=>BeeHiveView.Instance.UpdateSelectedWorkerType(WorkerType.EggCare))">
                                            Egg Nurse (@BeeHiveController.Instance.EggNurses)
                                        </div>
                                        @if (BeeHiveView.Instance.selectedWorkerType == WorkerType.EggCare)
                                        {
                                            <div class="assign-button @BeeHiveView.Instance.assignButtons" @onclick="(()=>BeeHiveView.Instance.AssignBee(BeeHiveView.Instance.selectedWorkerType))">
                                                Assign
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="btn control-button-work-v3" @onclick="BeeHiveView.Instance.WorkShift">
                                    Work Next Shift
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="behindpanel @UIService.PanelMgmt.Panels[1].BehindPanelStatus" @onclick="(()=>UIService.PanelMgmt.DeactivateAllPanels(true))"></div>
    <div class="settings-panel-container">
        <div class="settings-panel @UIService.PanelMgmt.Panels[1].PanelStatus">
            <h3 class="text-center">BeeHive Settings</h3>
            <br />
            <div class="settings-scrollable-section">
                <div class="">
                    <label class="form-check-label" for="timerBeingUsed">
                        <input class="form-check-input" type="checkbox" value="" id="timerBeingUsed" @bind="BeeHiveController.Instance.TimerIsBeingUsed">
                        Use Timer (<span style="color: red;"> WARNING: Changing from "unselected" to "selected" will force a game restart. </span>)
                    </label>
                </div>
            </div>
            <div class="settings-bottom-container">
                <div class="settings-close" @onclick="(()=>UIService.PanelMgmt.DeactivatePanel(1))">
                    Close
                </div>
            </div>
        </div>
    </div>
</ProjectsPageTemplate>

@code {
    private WorkerType workerType = WorkerType.HoneyManufacturer;

    protected override void OnInitialized()
    {
        BeeHiveController.Instance.BeeHive.Queen.OnTimerInterval += UpdateV3View;
        UIService.PanelMgmt.OnPanelMgmtUpdated += UpdateThisComponent;
    }
    void IDisposable.Dispose()
    {
        BeeHiveController.Instance.BeeHive.Queen.OnTimerInterval -= UpdateV3View;
        UIService.PanelMgmt.OnPanelMgmtUpdated -= UpdateThisComponent;
    }

    private void UpdateThisComponent(string meaningless) =>
        StateHasChanged();

    private void UpdateV3View(bool timerInterval)
    {
        BeeHiveView.Instance.UpdateAssignButtons();
        StateHasChanged();
    }
}

@*
    - Introstruction Page ('X' button in upper right corner and info button/icon
        on game screen for openning the introsctruction screen again)
        - story + mechanics + costs dynamics (each as simple statements)
    - Controls for adding three different bee workers + Work until next day button
    - Time option turned off by default with option to turn on
    - Text field prioviding updated game status (@bind)

    Other task: Update nav for this game (two places).

    Also sidenote, I need to add buttons with links to
    the descriptions of each game accessible from game UI.
*@
