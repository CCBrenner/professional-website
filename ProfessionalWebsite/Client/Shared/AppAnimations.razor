@using ProfessionalWebsite.Client.Classes.NavMgmt;

<h3>App Animations</h3>
<br />
<div class="layout-control-item">
    <button class="btn btn-primary" @onclick="(()=>navMgmt.PlayAnimation(1, FirstAnimationContinuous))">
        Bombastic
    </button>
    &nbsp;&nbsp;
    <input class="form-check-input" type="checkbox" @bind="@FirstAnimationContinuous" />
    &nbsp;Continuous
</div>
<div class="layout-control-item">
    <button class="btn btn-primary" @onclick="(()=>navMgmt.PlayAnimation(2, SecondAnimationContinuous))">
        Sky Walker
    </button>
    &nbsp;&nbsp;
    <input class="form-check-input" type="checkbox" @bind="@SecondAnimationContinuous" />
    &nbsp;Continuous
</div>
<div class="layout-control-item">
    <button class="btn btn-primary" @onclick="(()=>navMgmt.PlayAnimation(3, ThirdAnimationContinuous))">
        Kitchen Sink
    </button>
    &nbsp;&nbsp;
    <input class="form-check-input" type="checkbox" @bind="@ThirdAnimationContinuous" />
    &nbsp;Continuous
</div>
<div class="layout-control-item">
    <button class="btn btn-primary" @onclick="(()=>navMgmt.PlayAnimation(4, FourthAnimationContinuous))">
        Flipster
    </button>
    &nbsp;&nbsp;
    <input class="form-check-input" type="checkbox" @bind="@FourthAnimationContinuous" />
    &nbsp;Continuous
</div>
<div class="layout-control-item">
    <button class="btn btn-primary" @onclick="(()=>navMgmt.PlayAnimation(5, FifthAnimationContinuous))">
        Asteroid
    </button>
    &nbsp;&nbsp;
    <input class="form-check-input" type="checkbox" @bind="@FifthAnimationContinuous" />
    &nbsp;Continuous
</div>

@code
{
    private NavMgmt navMgmt = NavMgmt.Instance;

    private bool FirstAnimationContinuous = false;
    @*
    [Parameter]
    public EventCallback<bool> FirstAnimationCallback { get; set; }
    private async Task PlayFirst() =>
        await FirstAnimationCallback.InvokeAsync(1, FirstAnimationContinuous);*@

    private bool SecondAnimationContinuous = false;@*
    [Parameter]
    public EventCallback<bool> SecondAnimationCallback { get; set; }
    private async Task PlaySecond() =>
        await SecondAnimationCallback.InvokeAsync(2, SecondAnimationContinuous);*@

    private bool ThirdAnimationContinuous = false;@*
    [Parameter]
    public EventCallback<bool> ThirdAnimationCallback { get; set; }
    private async Task PlayThird() =>
        await ThirdAnimationCallback.InvokeAsync(3, ThirdAnimationContinuous);*@

    private bool FourthAnimationContinuous = false;@*
    [Parameter]
    public EventCallback<bool> FourthAnimationCallback { get; set; }
    private async Task PlayFourth() =>
        await FourthAnimationCallback.InvokeAsync(4, FourthAnimationContinuous);*@

    private bool FifthAnimationContinuous = false;
    @*
    [Parameter]
    public EventCallback<bool> FifthAnimationCallback { get; set; }
    private async Task PlayFifth() =>
        await FifthAnimationCallback.InvokeAsync(5, FifthAnimationContinuous);*@
}
