@inject SudokuService SudokuService

@* GUI allows for puzzle selection via dropdown box or manual entry;
        results are shown in the same 81-cell box;
        initial values are shown in black and the new values are shown in blue;
        additional stats can be shown in their own text field*@

<div class="comp-container">

    <div class="display-horizontal">
        <span>Puzzle Book&nbsp;</span>
        <select class="form-select form-select-sm puzzle-selector" @bind="SudokuService.SelectedMatrix">
            @foreach (var puzzlePair in SudokuService.Puzzles)
            {
                <option value="@puzzlePair.Key">@puzzlePair.Key</option>
            }
        </select>
    </div>

    <SudokuGrid SudokuService="SudokuService"/>

    <div class="hint">
        Click the Solve button once. It will begin solving. Try entering a custom puzzle by clicking the puzzle cells above!
        <br/>
        This solver on average solves in around 30s but it can take anywhere between 3s to 1m 45s to solve, depending on the puzzle.
        <br/>
        This puzzle uses the only thread available to the browser (it is synchronous).
    </div>

    <div class="buttons-container">
        <div class="btn btn-primary button" @onclick="SudokuService.SolveGui">
            Solve
        </div>
        <div class="btn btn-secondary button" @onclick="SudokuService.ResetCurrent">
            Reset
        </div>
    </div>

    @if (SudokuService.Puzzle.Ledger.ValueTxns.Count() != 0)
    {
        <div class="hint">
            Update Count: @SudokuService.Puzzle.Ledger.ValueTxns.Count() updates<br/>
            Progress: @SudokuService.Puzzle.ProgressPercentage%<br />
            Is Solved?: @SudokuService.IsSolved<br />
        </div>
    }

</div>

@code{
    //private bool _spinnerIsVisible = false;
}